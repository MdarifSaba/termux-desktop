#!/data/data/com.termux/files/usr/bin/bash

#########################################################################
#
# Call First
#
#########################################################################
R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"
termux_desktop_path="$PREFIX/etc/termux-desktop"
config_file="$termux_desktop_path/configuration"
cd $HOME

# create log
function debug() {
	log_file="$HOME/termux-desktop.log"
	exec > >(tee -a "$log_file") 2>&1
}

function banner() {
clear
echo "${Y} ▀█▀ █▀▀ █▀█ █▀▄▀█ █ █ ▀▄▀   █▀▄ █▀▀ █▀ █▄▀ ▀█▀ █▀█ █▀█ "${W}
echo "${Y}  █  ██▄ █▀▄ █   █ █▄█ █ █   █▄▀ ██▄ ▄█ █ █  █  █▄█ █▀▀ "${W}
echo
echo "${C}${BOLD} Install Gui Desktop In Termux"${W}
echo "${C}${BOLD} code by @sabamdrif"${W}
echo
}

# check if the script is running on termux or not
function check_termux() {
	if [[ $HOME != *termux* ]]; then
	echo "${R}[${R}☓${R}]${R}${BOLD}Please run it inside termux"${W}
	exit 0
	fi
}

#########################################################################
#
# Shortcut Functions
#
#########################################################################

function check_and_create_directory() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
    fi
}

# first check then delete
function check_and_delete() {
    local file
    for files_folders in "$@"; do
        for file in $files_folders; do
            if [[ -e "$file" ]]; then
                if [[ -d "$file" ]]; then
                    rm -rf "$file" >/dev/null 2>&1
                elif [[ -f "$file" ]]; then
                    rm "$file" >/dev/null 2>&1
                fi
            fi
        done
    done
}

# first check then backup
function check_and_backup() {
	local file
	local files_folders
    for files_folders in "$@"; do
        for file in $files_folders; do
            if [[ -e "$file" ]]; then
            local date_str=$(date +"%d-%m-%Y")
			local backup="${file}-${date_str}.bak"
			    if [[ -e "$backup" ]]; then
				echo "${R}[${C}-${R}]${G}Backup file ${C}${backup} ${G}already exists"${W}
				echo
				fi
		    echo "${R}[${C}-${R}]${G}backing up file ${C}$file"${W}
			mv "$1" "$backup"
            fi
        done
    done
}

# find a backup file which end with a number pattern and restore it
function check_and_restore() {
    local target_path="$1"
    local dir
    local base_name

    dir=$(dirname "$target_path")
    base_name=$(basename "$target_path")

    local latest_backup
    latest_backup=$(ls -1 "$dir/$base_name"-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9].bak 2>/dev/null | sort | tail -n 1)

    if [[ -z "$latest_backup" ]]; then
        echo "${R}[${R}☓${R}]${R}No backup file found for ${target_path}.${W}"
		echo
        return 1
    fi

    if [[ -e "$target_path" ]]; then
        echo "${R}[${R}☓${R}]${C}Original file or directory ${target_path} already exists.${W}"
		echo
    else
        mv "$latest_backup" "$target_path"
        echo "${R}[${G}✓${R}]${G}Restored ${latest_backup} to ${target_path}.${W}"
		echo
    fi
}

# will check if the package is already installed or not, if it installed then it will reinstall it and at the end it will print success/failed message
function package_install_and_check() {
    packs_list=($@)
    for package_name in "${packs_list[@]}"; do
        echo "${R}[${C}-${R}]${G}${BOLD} Processing package: ${C}$package_name ${W}"
        
        if type -p pacman >/dev/null 2>&1; then
            if pacman -Qi "$package_name" >/dev/null 2>&1; then
                echo "${package_name}=\"already_exist\"" >> "$config_file"
                continue
            fi
            
            if [[ $package_name == *"*"* ]]; then
                echo "${R}[${C}-${R}]${C} Processing wildcard pattern: $package_name ${W}"
                packages=$(pacman -Ssq "${package_name%*}" 2>/dev/null)
                for pkgs in $packages; do
                    echo "${R}[${C}-${R}]${G}${BOLD} Installing matched package: ${C}$pkgs ${W}"
                    pacman -Sy --noconfirm --overwrite '*' "$pkgs"
                done
            else
                pacman -Sy --noconfirm --overwrite '*' "$package_name"
            fi
            
        else
            if [[ $package_name == *"*"* ]]; then
                echo "${R}[${C}-${R}]${C} Processing wildcard pattern: $package_name ${W}"
                packages_by_name=$(apt-cache search "${package_name%*}" | awk "/^${package_name}/ {print \$1}")
				packages_by_description=$(apt-cache search "${package_name%*}" | grep -Ei "\b${package_name%*}\b" | awk '{print $1}')
				packages=$(echo -e "${packages_by_name}\n${packages_by_description}" | sort -u)
                for pkgs in $packages; do
                    echo "${R}[${C}-${R}]${G}${BOLD} Installing matched package: ${C}$pkgs ${W}"
                    if dpkg -s "$pkgs" >/dev/null 2>&1; then
                        echo "${pkgs}=\"already_exist\"" >> "$config_file"
                        pkg reinstall "$pkgs" -y
                    else
                        pkg install "$pkgs" -y
                    fi
                done
            else
                if dpkg -s "$package_name" >/dev/null 2>&1; then
                    echo "${package_name}=\"already_exist\"" >> "$config_file"
                    pkg reinstall "$package_name" -y
                else
                    pkg install "$package_name" -y
                fi
            fi
        fi

        # Check installation success
        if [ $? -ne 0 ]; then
            echo "${R}[${C}-${R}]${G}${BOLD} Error detected during installation of: ${C}$package_name ${W}"
            if type -p pacman >/dev/null 2>&1; then
                pacman -Sy --overwrite '*' "$package_name"
                pacman -Sy --noconfirm "$package_name"
            else
                apt --fix-broken install -y
                dpkg --configure -a
                pkg install "$package_name" -y
            fi
        fi

        # Final verification
		if [[ $package_name != *"*"* ]]; then
        	if type -p pacman >/dev/null 2>&1; then
        	    if pacman -Qi "$package_name" >/dev/null 2>&1; then
        	        echo "${R}[${G}✓${R}]${G} $package_name installed successfully ${W}"
        	    else
        	        echo "${R}[${R}☓${R}]${C} $package_name installation failed ${W}"
        	    fi
        	else
        	    if dpkg -s "$package_name" >/dev/null 2>&1; then
        	        echo "${R}[${G}✓${R}]${G} $package_name installed successfully ${W}"
        	    else
        	        echo "${R}[${R}☓${R}]${C} $package_name installation failed ${W}"
        	    fi
        	fi
		fi
    done
    echo ""
}

# will check the package is installed or not then remove it
function package_check_and_remove() {
    packs_list=($@)
    for package_name in "${packs_list[@]}"; do
        echo "${R}[${C}-${R}]${G}${BOLD} Processing package: ${C}$package_name ${W}"

        if [[ $package_name == *"*"* ]]; then
            echo "${R}[${C}-${R}]${C} Processing wildcard pattern: $package_name ${W}"

            if type -p pacman >/dev/null 2>&1; then
                packages=$(pacman -Qq | grep -E "${package_name//\*/.*}")
            else
                packages=$(dpkg --get-selections | awk '{print $1}' | grep -E "${package_name//\*/.*}")
            fi

            for pkg in $packages; do
                echo "${R}[${C}-${R}]${G}${BOLD} Removing matched package: ${C}$pkg ${W}"

                if type -p pacman >/dev/null 2>&1; then
                    if pacman -Qi "$pkg" >/dev/null 2>&1; then
                        pacman -Rnds --noconfirm "$pkg"
                        if [ $? -eq 0 ]; then
                            echo "${R}[${G}✓${R}]${G} $pkg removed successfully ${W}"
                        else
                            echo "${R}[${R}☓${R}]${C} Failed to remove $pkg ${W}"
                        fi
                    fi
                else
                    if dpkg -s "$pkg" >/dev/null 2>&1; then
                        apt autoremove "$pkg" -y
                        if [ $? -eq 0 ]; then
                            echo "${R}[${G}✓${R}]${G} $pkg removed successfully ${W}"
                        else
                            echo "${R}[${R}☓${R}]${C} Failed to remove $pkg ${W}"
                        fi
                    fi
                fi
            done
        else
            if type -p pacman >/dev/null 2>&1; then
                if pacman -Qi "$package_name" >/dev/null 2>&1; then
                    echo "${R}[${C}-${R}]${G}${BOLD} Removing package: ${C}$package_name ${W}"
                    pacman -Rnds --noconfirm "$package_name"
                    if [ $? -eq 0 ]; then
                        echo "${R}[${G}✓${R}]${G} $package_name removed successfully ${W}"
                    else
                        echo "${R}[${R}☓${R}]${C} Failed to remove $package_name ${W}"
                    fi
                fi
            else
                if dpkg -s "$package_name" >/dev/null 2>&1; then
                    echo "${R}[${C}-${R}]${G}${BOLD} Removing package: ${C}$package_name ${W}"
                    apt autoremove "$package_name" -y
                    if [ $? -eq 0 ]; then
                        echo "${R}[${G}✓${R}]${G} $package_name removed successfully ${W}"
                    else
                        echo "${R}[${R}☓${R}]${C} Failed to remove $package_name ${W}"
                    fi
                fi
            fi
        fi
    done
    echo ""
}

function get_file_name_number() {
    current_file=$(basename "$0")
    folder_name="${current_file%.sh}"
    theme_number=$(echo "$folder_name" | grep -oE '[1-9][0-9]*')
}

function extract_zip_with_progress() {
    local archive="$1"
    local target_dir="$2"

    # Check if the archive file exists
    if [[ ! -f "$archive" ]]; then
        echo "${R}[${R}☓${R}]${R}$archive doesn't exist${W}"
        return 1
    fi

    local total_files=$(unzip -l "$archive" | grep -E '^\s+[0-9]+' | wc -l)

    if [[ "$total_files" -eq 0 ]]; then
        echo "${R}[${R}☓${R}]${R}No files found in the archive${W}"
        return 1
    fi

    echo "Total files to extract: $total_files"
    local extracted_files=0
    unzip -o "$archive" -d "$target_dir" | while read line; do
        if [[ "$line" =~ inflating: ]]; then
            ((extracted_files++))
            progress=$((extracted_files * 100 / total_files))
            echo -ne "${G}Extracting: ${C}$progress% ($extracted_files/$total_files) \r"${W}
        fi
    done

    echo "${R}[${G}✓${R}]${G}${archive} Extraction complete!"${W}
}

function extract_archive() {
    local archive="$1"
    if [[ ! -f "$archive" ]]; then
        echo -e "${R}[☓]${R} $archive doesn't exist${W}"
        return 1
    fi

    local total_size
    total_size=$(stat -c '%s' "$archive")

    case "$archive" in
        *.tar.gz|*.tgz)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | tar xzf - || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.tar.xz)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | tar xJf - || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.tar.bz2|*.tbz2)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | tar xjf - || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.tar)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | tar xf - || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.bz2)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | bunzip2 > "${archive%.bz2}" || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.gz)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | gunzip > "${archive%.gz}" || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *.7z)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            pv -s "$total_size" -p -r "$archive" | 7z x -si -y > /dev/null || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
		*.zip)
            extract_zip_with_progress "${archive}"
            ;;
        *.rar)
            echo -e "${G}[✔] Extracting ${C}$archive${W}"
            unrar x "$archive" || { echo -e "${R}[☓] Failed to extract ${C}$archive${W}"; return 1; }
            ;;
        *)
            echo -e "${R}[☓] Unsupported archive format: ${C}$archive${W}"
            return 1
            ;;
    esac

    echo -e "${G}[✔] Successfully extracted ${C}$archive${W}"
}

# download a archive file and extract it in a folder
function download_and_extract() {
    local url="$1"
    local target_dir="$2"
    local filename="${url##*/}"

    # Notify user about downloading
    echo "${R}[${C}-${R}]${C}${BOLD}Downloading ${G}${filename}...${W}"
    sleep 1.5

    # Change to the target directory
    cd "$target_dir" || return 1

    local attempt=1
    local success=false

    # Attempt to download the file with retries
    while [[ $attempt -le 3 ]]; do
        if curl -# -L "$url" -o "$filename"; then
            success=true
            break
        else
            echo "${R}[${R}☓${R}]${R}Failed to download ${C}${filename}${W}"
            echo "${R}[${C}☓-{R}]${G}Retrying... Attempt ${C}$attempt${W}"
            ((attempt++))
            sleep 1
        fi
    done

    # If download is successful, extract and remove the archive
    if [[ "$success" = true ]]; then
        if [[ -f "$filename" ]]; then
            echo
            echo "${R}[${C}-${R}]${R}[${C}-${R}]${G} Extracting $filename${W}"
            extract_archive "$filename"
            rm "$filename"
        fi
    else
        # Notify if download fails after all attempts
        echo "${R}[${R}☓${R}]${R}Failed to download ${C}${filename}${W}"
        echo "${R}[${C}-${R}]${C}Please check your internet connection${W}"
    fi
}

# count the number subfolders inside a folder in my repo
function count_subfolders() {
    local owner="$1"
    local repo="$2"
    local path="$3"
    local url="https://api.github.com/repos/$owner/$repo/contents/$path"
    local response=$(curl -s "$url")
    local subfolder_count=$(echo "$response" | jq -r '.[] | select(.type == "dir") | .name' | wc -l)

    if [[ -z "$subfolder_count" || "$subfolder_count" -eq 0 ]]; then
        subfolder_count=0
    fi

    echo "$subfolder_count"
}

# create a yes / no confirmation prompt
function confirmation_y_or_n() {
	 while true; do
        read -p "${R}[${C}-${R}]${Y}${BOLD} $1 ${Y}(y/n) "${W} response
        response="${response:-y}"
        eval "$2='$response'"
        case $response in
            [yY]* )
				echo
                echo "${R}[${G}✓${R}]${G} Continuing with answer: $response"${W}
				echo
				sleep 0.2
                break;;
            [nN]* )
				echo
                echo "${R}[${C}-${R}]${C} Skipping this setp"${W}
				echo
				sleep 0.2
                break;;
            * )
				echo
               	echo "${R}[${R}☓${R}]${R} Invalid input. Please enter 'y' or 'n'."${W}
				echo
                ;;
        esac
    done

}

# get the latest version from a github releases
# ex. latest_tag=$(get_latest_release "$repo_owner" "$repo_name")
function get_latest_release() {
	local repo_woner="$1"
	local repo_name="$2"
	curl -s "https://api.github.com/repos/$repo_woner/$repo_name/releases/latest" |
	grep '"tag_name":' |
	sed -E 's/.*"([^"]+)".*/\1/'
}

function install_font_for_style() {
	local style_number="$1"
	echo "${R}[${C}-${R}]${G} Installing Fonts..."${W}
	check_and_create_directory "$HOME/.fonts"
	download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/$de_name/look_${style_number}/font.tar.gz" "$HOME/.fonts"
	fc-cache -f
	cd
}

function download_github_action_artifact() {
    # Parse arguments passed to the function
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --user)
                GITHUB_USER="$2"
                shift 2
                ;;
            --repo)
                REPO="$2"
                shift 2
                ;;
            --workflow-name)
                WORKFLOW_NAME="$2" # The name of the CI workflow
                shift 2
                ;;
            --run-name)
                RUN_NAME="$2" # Specific name/description of the workflow run
                shift 2
                ;;
            --artifact-name)
                ARTIFACT_NAME="$2" # Artifact name prefix (can be modified as needed)
                shift 2
                ;;
            *)
                echo "${R}[${R}☓${R}]Unknown option: $1"${W}
                shift
                ;;
        esac
    done

    # Get the workflow ID using the workflow name
    WORKFLOW_ID=$(gh api repos/$GITHUB_USER/$REPO/actions/workflows --jq ".workflows[] | select(.name == \"$WORKFLOW_NAME\") | .id")
    
    # Check if WORKFLOW_ID is found
    if [ -z "$WORKFLOW_ID" ]; then
        echo "${R}[${R}☓${R}]${R} Workflow '$WORKFLOW_NAME' not found."${W}
        exit 1
    fi

    # Display the workflow ID
    echo "${R}[${C}-${R}]${G} Workflow ID for ${W}'$WORKFLOW_NAME' ${G}is ${W}$WORKFLOW_ID"

    # Get the latest workflow run ID with the specific display title
    WORKFLOW_RUN_ID=$(gh api repos/$GITHUB_USER/$REPO/actions/workflows/$WORKFLOW_ID/runs --paginate --jq ".workflow_runs[] | select(.display_title == \"$RUN_NAME\") | .id" | head -n 1)
    
    # Check if WORKFLOW_RUN_ID is obtained
    if [ -z "$WORKFLOW_RUN_ID" ]; then
        echo "${R}[${R}☓${R}]${R} No workflow run found with the name '$RUN_NAME' for workflow '$WORKFLOW_NAME'."${W}
        exit 1
    fi

    # List artifacts for the found run
    ARTIFACT_URL=$(gh api repos/$GITHUB_USER/$REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .archive_download_url")
    
    # If no exact match, look for an artifact starting with ARTIFACT_NAME
    if [ -z "$ARTIFACT_URL" ]; then
        echo "${R}[${C}-${R}]${C} Artifact with the exact name '$ARTIFACT_NAME' not found. Looking for artifacts starting with '$ARTIFACT_NAME'..."${W}
        ARTIFACT_URL=$(gh api repos/$GITHUB_USER/$REPO/actions/runs/$WORKFLOW_RUN_ID/artifacts --jq ".artifacts[] | select(.name | startswith(\"$ARTIFACT_NAME\")) | .archive_download_url" | head -n 1)
    fi

    # Check if ARTIFACT_URL is found
    if [ -z "$ARTIFACT_URL" ]; then
        echo "${R}[${R}☓${R}]${R} No artifact found starting with '$ARTIFACT_NAME'."${W}
        exit 1
    fi

    # Download the artifact using the URL
    echo "${R}[${G}✓${R}]${G} Downloading artifact from run '$RUN_NAME'..."${W}
    curl -# -L -H "Authorization: Bearer $(gh auth token)" -o artifact.zip "$ARTIFACT_URL"

    # Extract the artifact
    extract_archive "artifact.zip"
}

function select_an_option() {
    local max_options=$1
    local default_option=${2:-1}
    local response_var=$3
    local response

    while true; do
        read -p "${Y}select an option (Default ${default_option}): ${W}" response
        response=${response:-$default_option}

        if [[ $response =~ ^[0-9]+$ ]] && ((response >= 1 && response <= max_options)); then
            echo
            echo "${R}[${G}✓${R}]${G} Continuing with answer: $response${W}"
            sleep 0.2
            eval "$response_var=$response"
            break
        else
            echo
            echo "${R}[${R}☓${R}]${R} Invalid input. Please enter a number between 1 and $max_options.${W}"
        fi
    done
}

#########################################################################
#
# Ask Required Questions
#
#########################################################################

# check the avilable styles and create a list to type the corresponding number
# in the style readme file the name must use this'## number name :' pattern, like:- ## 1. Basic Style:
function questions_theme_select() {
    local owner="sabamdarif"
    local repo="termux-desktop"
    local main_folder="patch/$de_name"
    local subfolder_count_value=$(count_subfolders "$owner" "$repo" "$main_folder" 2>/dev/null)
    
    cd $HOME
    echo "${R}[${C}-${R}]${G} Downloading list...."${W}
    wget -qO ${current_path}/styles.md https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/${de_name}_styles.md
    clear

    # Check if the subfolder count value is obtained
    if [[ -n "$subfolder_count_value" ]]; then
        echo "${R}[${C}-${R}]${G} Check the $de_name styles section in GitHub"${W}
        echo
        echo "${R}[${C}-${R}]${B} https://github.com/sabamdarif/termux-desktop/blob/main/${de_name}_styles.md"${W}
        echo
        echo "${R}[${C}-${R}]${G} Number of available custom styles for $de_name is: ${C}${subfolder_count_value}"${W}
        echo
        echo "${R}[${C}-${R}]${G} Available Styles:${W}"
        echo
        
        # Display available styles from the styles.md file
        grep -oP '## \d+\..+?(?=(\n## \d+\.|\Z))' styles.md | while read -r style; do
            echo "${Y}${style#### }${W}"
        done

        # Prompt user to select a style
        while true; do
            echo
            read -p "${R}[${C}-${R}]${Y} Type number of the style: ${W}" style_answer

            # Check if the input is empty
            if [[ -z "$style_answer" ]]; then
                echo
                echo "${R}[${R}☓${R}]${R} Input cannot be empty. Please type a number."${W}
                continue
            fi

            # Ensure the input is a valid number and within range
            if [[ "$style_answer" =~ ^[0-9]+$ ]] && [[ "$style_answer" -ge 0 ]] && [[ "$style_answer" -le "$subfolder_count_value" ]]; then
                style_name=$(grep -oP "^## $style_answer\..+?(?=(\n## \d+\.|\Z))" styles.md | sed -e "s/^## $style_answer\. //" -e "s/:$//")
                break
            else
                echo
                echo "${R}[${R}☓${R}]${R} The entered style number is incorrect."${W}
                echo
				if [[ "$subfolder_count_value" == "0" ]]; then
				echo "${R}[${C}-${R}]${Y} Please enter 0 beacuse for $de_name only stock style is available"${W}
                echo
				else
				echo "${R}[${C}-${R}]${Y} Please enter a number between 0 to ${subfolder_count_value}"${W}
                echo
				fi
                echo "${R}[${C}-${R}]${G} Check the $de_name styles section in GitHub"${W}
                echo
                echo "${R}[${C}-${R}]${B} https://github.com/sabamdarif/termux-desktop/blob/main/${de_name}_styles.md"${W}
                echo
            fi
        done
        
        # Remove the styles.md file after use
        rm ${current_path}/styles.md
    else
        echo "${R}[${R}☓${R}]${R} Failed to get total available styles value."${W}
    fi
}

function questions() {
	banner
	echo "${R}[${C}-${R}]${G} Select Desktop Environment"${W}
	echo " "
	echo "${Y}1. XFCE"${W}
	echo
	echo "${Y}2. LXQT"${W}
	echo
	echo "${Y}3. OPENBOX WM"${W}
	echo
	echo "${Y}4. MATE (Unstable)"${W}
	echo
	select_an_option 4 1 desktop_answer
	# set the variables based on chosen de
	sys_icons_folder="$PREFIX/share/icons"
	sys_themes_folder="$PREFIX/share/themes"
	if [[ "$desktop_answer" == "1" ]]; then
	de_name="xfce"
	themes_folder="$HOME/.themes"
	icons_folder="$HOME/.icons"
	de_startup="xfce4-session"
	elif [[ "$desktop_answer" == "2" ]]; then
	de_name="lxqt"
	themes_folder="$sys_themes_folder"
	icons_folder="$sys_icons_folder"
	de_startup="startlxqt"
	elif [[ "$desktop_answer" == "3" ]]; then
	de_name="openbox"
	themes_folder="$sys_themes_folder"
	icons_folder="$sys_icons_folder"
	de_startup="openbox-session"
	elif [[ "$desktop_answer" == "4" ]]; then
	de_name="mate"
	themes_folder="$HOME/.themes"
	icons_folder="$HOME/.icons"
	de_startup="mate-session"
	fi
	echo "de_startup=\"$de_startup\"" >> $config_file
	echo "de_name=\"$de_name\"" >> $config_file
	echo "themes_folder=\"$themes_folder\"" >> $config_file
	echo "icons_folder=\"$icons_folder\"" >> $config_file

	banner
	questions_theme_select
	echo
	echo "${R}[${G}✓${R}]${G} Continuing with answer: ${style_answer}.$style_name"${W}
	echo "style_answer=\"$style_answer\"" >> $config_file
	echo "style_name=\"$style_name\"" >> $config_file
	sleep 0.2
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Select browser you want to install"${W}
	echo
	echo "${Y}1. firefox"${W}
	echo
	echo "${Y}2. chromium"${W}
	echo
	echo "${Y}3. firefox & chromium (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	select_an_option 4 1 browser_answer
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Select IDE you want to install"${W}
	echo
	echo "${Y}1. VS Code"${W}
	echo
	echo "${Y}2. Geany (lightweight IDE)"${W}
	echo
	echo "${Y}3. VS Code & Geany (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	select_an_option 4 1 ide_answer
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Select Media Player you want to install"${W}
	echo
	echo "${Y}1. Vlc"${W}
	echo
	echo "${Y}2. Audacious"${W}
	echo
	echo "${Y}3. Vlc & Audacious (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	select_an_option 4 1 player_answer
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Select Photo Editor"${W}
	echo
	echo "${Y}1. Gimp"${W}
	echo
	echo "${Y}2. Inkscape"${W}
	echo
	echo "${Y}3. Gimp & Inkscape (both)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	select_an_option 4 1 photo_editor_answer
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Do you want to install wine in termux ${C}(without proot-distro)"${W}
	echo
	echo "${Y}1. Natively ${C}(can run only arm64 based exe)"${W}
	echo
	echo "${Y}2. Using Mobox ${C}"${W}
	echo
	echo "${R}[${C}-${R}]${B} Know More About Mobox:- https://github.com/olegos2/mobox/"${W}
	echo
	echo "${Y}3. Wine Hangover (Best)"${W}
	echo
	echo "${Y}4. Skip"${W}
	echo
	select_an_option 4 1 wine_answer
	banner
	confirmation_y_or_n "Do you want to install a graphical package manager [Synaptic]" synaptic_answer
	banner
	echo "${R}[${C}-${R}]${G} By Default it only add 4 - 5 wallpaper"${W}
	echo
	confirmation_y_or_n "Do you want to add some more wallpaper" ext_wall_answer
	banner
	confirmation_y_or_n "Do you want to Configuring Zsh" zsh_answer
	banner
	echo
	echo "${R}[${C}-${R}]${B} Know More About Terminal Utility:- https://github.com/sabamdarif/termux-desktop/blob/main/see-more.md#hammer_and_wrenchlearn-about-terminal-utilities"${W}
	echo
	confirmation_y_or_n "Do you want install some terminal utility to make better terminal exprience" terminal_utility_setup_answer
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Select Gui Mode"${W}
	echo
	echo "${Y}1. Termux:x11"${W}
	echo
	echo "${Y}2. Vnc (Not Recomended)"${W}
	echo
	echo "${Y}3. Both"${W}
	echo
	select_an_option 3 1 gui_mode
	banner
	confirmation_y_or_n "Do you want to start the desktop at Termux startup" de_on_startup
	if [[ "$de_on_startup" == "y" && "$gui_mode" == "3" ]]; then
	echo "${R}[${C}-${R}]${G} You chose both vnc and termux:x11 to access gui mode"${W}
	echo
	echo "${R}[${C}-${R}]${G} Which will be your default"${W}
	echo
	echo "${Y}1. Termux:x11"${W}
	echo
	echo "${Y}2. Vnc"${W}
	echo
	select_an_option 2 1 autostart_gui_mode
	fi
	banner
	echo "${R}[${C}-${R}]${Y}${BOLD} Do you want to add a distro container (proot distro)"${W}
	echo
	echo "${R}[${C}-${R}]${G} It will help you to install those app which are not avilable in termux"${W}
	echo
	echo "${R}[${C}-${R}]${C} You can launch those installed apps from termux like other apps"${W}
	echo
	confirmation_y_or_n "Do you want to continue" distro_add_answer
	echo "distro_add_answer=\"$distro_add_answer\"" >> $config_file
	clear
	if ! type -p pacman >/dev/null 2>&1; then
	echo "${R}[${C}-${R}]${R}${BOLD} Read This Carefully"${W}
	echo -e "
The experimental drivers only support a few GPUs\n

In my tests, I achieved 1000+ FPS in vkmark on all my devices. I tried it on an Adreno 619 (best everything work fine), Adreno 750 (usable but some apps don't launch), Adreno 720 (good overall but with few issues), and Mali G76 (similar issue like Adreno 720). But in Mali G57 everything work with this driver\n

Also if you have Adreno GPU then please select ubuntu or debian as distro container so it can use ternip in the distro container.\n
Sadly for other then adreno, GPU might not work on the distro container./n

If you type 'n/N' then it will use the old way to setup Hardware Acceleration./n
	"
	confirmation_y_or_n "Do you want to enable the new Experimental Hardware Acceleration support" confirmation_exp_hwa
	echo "confirmation_exp_hwa=\"$confirmation_exp_hwa\"" >> $config_file
	fi
}

# distro hardware accelrration related questions
function distro_hw_questions() {
	if [[ "$distro_add_answer" == "y" ]]; then
       echo
       echo "${R}[${C}-${R}]${G}${BOLD} Select Hardware Acceleration API For Distro Container"${W}
       echo
       echo "${R}[${C}-${R}]${G} If You Are Not Sure So Skip It It Will Use The Previous One"${W}
       echo
	   if [[ "$termux_hw_answer" == "2" ]]; then
	   echo "${Y}1. OpenGL (VIRGL)"${W}
	   echo
	   echo "${Y}2. Turnip (Adreno GPU Only)"${W}
	   echo
	   echo "${Y}3. Skip"${W}
	   echo
	   select_an_option 3 1 pd_hw_answer
	   else
	   echo "${Y}1. Vulkan (ZINK)"${W}
	   echo
	   echo "${Y}2. OpenGL ES (ZINK VIRGL)"${W}
	   echo
	   echo "${Y}3. Turnip (Adreno GPU Only)"${W}
	   echo
	   echo "${Y}4. Skip"${W}
	   echo
	   select_an_option 4 1 pd_hw_answer
	   fi
	echo "pd_hw_answer=\"$pd_hw_answer\"" >> $config_file
    fi
}

# hardware accelrration related questions

function exp_termux_gl_hw_support() {
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} First Read This"${W}
	echo
	echo "${R}[${C}-${R}]${B} This:- https://github.com/sabamdarif/termux-desktop/blob/main/hw-acceleration.md"${W}
	echo
	echo "${R}[${C}-${R}]${G}${BOLD} It will be used to enable opengl support"${W}
	echo
	echo "${Y}1. Vulkan (ZINK)"${W}
	echo
	echo "${Y}2. OpenGL (VIRGL)"${W}
	echo
	echo "${Y}3. OpenGL ES (ZINK VIRGL)"${W}
	echo
	echo "${Y}4. Use The Experimental Driver"${W}
	echo
	select_an_option 4 1 exp_termux_gl_hw_answer
	exp_termux_gl_hw_answer=${exp_termux_gl_hw_answer:-1}
	termux_hw_answer="${exp_termux_gl_hw_answer}"
	echo "exp_termux_gl_hw_answer=\"$exp_termux_gl_hw_answer\"" >> $config_file
	echo "termux_hw_answer=\"$exp_termux_gl_hw_answer\"" >> $config_file

	if [[ "$device_gpu_model" == "1" ]]; then
	    if [[ "$distro_answer" == "1" || "$distro_answer" == "2" ]]; then
		pd_hw_answer="3"
		fi
	else
	    if [[ "$distro_add_answer" == "y" ]]; then
			if [[ "$exp_termux_gl_hw_answer" == "2" ]]; then
			pd_hw_answer="1"
			else
			distro_hw_questions
			fi
		fi
	fi
}

function exp_hwa_support() {
	if [[ "$confirmation_exp_hwa" == "y" ]]; then
	echo -e "${R}[${C}-${R}]${G} Experimental Hardware Acceleration Will Use The mesa-vulkan-icd-wrapper Package\n For other GPUs, Experimental Driver might not work and could break the desktop environment\n Select Your Device GPU"${W}
    echo
	echo "${Y}1. Adreno"${W}
	echo
    echo "${Y}2. Mali"${W}
	echo
	echo "${Y}3. Xclipse"${W}
	echo
	echo "${Y}4. Others"${W}
	echo
	select_an_option 4 1 device_gpu_model
	echo "device_gpu_model=\"$device_gpu_model\"" >> $config_file
	exp_termux_gl_hw_support
	fi
}

function hw_questions() {
    echo "${R}[${C}-${R}]${G}${BOLD} First Read This"${W}
    echo
    echo "${R}[${C}-${R}]${B} This:- https://github.com/sabamdarif/termux-desktop/blob/main/hw-acceleration.md"${W}
    echo
    echo "${R}[${C}-${R}]${G}${BOLD} Select Hardware Acceleration API"${W}
    echo
	echo "${Y}1. Vulkan (ZINK)"${W}
	echo
    echo "${Y}2. OpenGL (VIRGL)"${W}
	echo
	echo "${Y}3. OpenGL ES (ZINK VIRGL)"${W}
	echo
	echo "${Y}4. Freedreno ${C}(Adreno 610 And Above | didn't work for me)"${W}
	echo
	select_an_option 4 1 termux_hw_answer
	echo "termux_hw_answer=\"$termux_hw_answer\"" >> $config_file
	distro_hw_questions
}

# distro related questions
function choose_distro() {
	echo "${R}[${C}-${R}]${G}${BOLD} Select Distro You Want To Add"${W}
	echo " "
	echo "${Y}1. Debian"${W}
	echo " "
	echo "${Y}2. Ubuntu"${W}
	echo " "
	echo "${Y}3. Arch"${W}
	echo " "
	echo "${Y}4. Apline"${W}
	echo " "
	echo "${Y}5. Fedora"${W}
	echo " "
	select_an_option 5 1 distro_answer
	echo "distro_answer=\"$distro_answer\"" >> $config_file
}

function distro_questions() {
	banner
	choose_distro
	banner
	confirmation_y_or_n "Do you want to configure audio support for distro container" pd_audio_config_answer
	if [[ "$distro_add_answer" == "y" ]] && [[ "$zsh_answer" == "y" ]]; then
	banner
	confirmation_y_or_n "Do you want to Configuring Zsh also for distro container ${C}(take longer time to login into distro)" distro_zsh_answer
	echo "distro_zsh_answer=\"$distro_zsh_answer\"" >> $config_file
	fi
	if [[ "$distro_add_answer" == "y" ]] && [[ "$terminal_utility_setup_answer" == "y" ]]; then
	banner
	confirmation_y_or_n "Do you want install the terminal utility also for distro container" distro_terminal_utility_setup_answer
	echo "distro_terminal_utility_setup_answer=\"$distro_terminal_utility_setup_answer\"" >> $config_file
	fi
	banner
	confirmation_y_or_n "Do you want to create a normal user account ${C}(Recomended)" pd_useradd_answer
	echo "pd_useradd_answer=\"$pd_useradd_answer\"" >> $config_file
	echo
	if [[ "$pd_useradd_answer" == "n" ]]; then
	echo "${R}[${C}-${R}]${G} Skiping User Account Setup"${W}
	else
	echo "${R}[${C}-${R}]${G}${BOLD} Select user account type"${W}
	echo
	echo "${Y}1. User with no password confirmation"${W}
	echo
	echo "${Y}2. User with password confirmation"${W}
	echo
	select_an_option 2 1 pd_pass_type
	echo "pd_pass_type=\"$pd_pass_type\"" >> $config_file
	    if [[ "$pd_pass_type" == "1" ]]; then
	    while true; do
		echo " "
		echo "${R}[${C}-${R}]${G} Default Password Will Be Set, Because Sometime It Might Ask You For Password"${W}
		echo
		echo "${R}[${C}-${R}]${G} Password:-${C}root"${W}
		echo
	    read -p "${R}[${C}-${R}]${G} Input username [Lowercase]: "${W} user_name
	    echo
	    read -p "${R}[${C}-${R}]${Y} Do you want to continue with username ${C}$user_name ${Y}? (y/n) : "${W} choice
	    echo
	    choice="${choice:-y}"
	    echo
	    echo "${R}[${G}✓${R}]${G} Continuing with answer: $choice"${W}
	    sleep 0.2
	    case $choice in
	    [yY]* )
	    echo "${R}[${G}✓${R}]${G} Continuing with username ${C}$user_name "${W}
	    break;;
	    [nN]* )
	    echo "${R}[${C}-${R}]${G}Please provide username again."${W}
	    echo
	    ;;
	    * )
	    echo "${R}[${R}☓${R}]${R}Invalid input. Please enter 'y' or 'n'."${W}
	    ;;
	    esac
	    done
	    echo "user_name=\"$user_name\"" >> $config_file
	    elif [[ "$pd_pass_type" == "2" ]]; then
	    echo
	    echo "${R}[${C}-${R}]${G}${BOLD} Create user account"${W}
	    echo
	    while true; do
	    read -p "${R}[${C}-${R}]${G}Input username [Lowercase]: "${W} user_name
	    echo
	    read -p "${R}[${C}-${R}]${G}Input Password: "${W} pass
	    echo
	    read -p "${R}[${C}-${R}]${Y}Do you want to continue with username ${C}$user_name ${Y}and password ${C}$pass${Y} ? (y/n) : "${W} choice
	    echo
	    choice="${choice:-y}"
	    echo
	    echo "${R}[${G}✓${R}]${G} Continuing with answer: $choice"${W}
	    echo ""
	    sleep 0.2
	    case $choice in
	    [yY]* )
	    echo "${R}[${G}✓${R}]${G} Continuing with username ${C}$user_name ${G}and password ${C}$pass"${W}
	    break;;
	    [nN]* )
	    echo "${R}[${C}-${R}]${G}Please provide username and password again."${W}
	    echo
	    ;;
	    * )
	    echo "${R}[${R}☓${R}]${R}Invalid input. Please enter 'y' or 'n'."${W}
	    ;;
	    esac
	    done
	    echo "user_name=\"$user_name\"" >> $config_file
	    echo "pass=\"$pass\"" >> $config_file
	    fi
	fi
}

#########################################################################
#
# Update System And Install Required Packages Repo And Bssic Task
#
#########################################################################

function update_sys() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Updating System...."${W}
    echo

    if type -p pacman >/dev/null 2>&1; then
        pacman -Syu --noconfirm
    else
        echo "${R}[${C}-${R}]${G}${BOLD}Selecting best termux packages mirror please wait"${W}
        unlink "$PREFIX/etc/termux/chosen_mirrors" &>/dev/null
        ln -s "$PREFIX/etc/termux/mirrors/all" "$PREFIX/etc/termux/chosen_mirrors" &>/dev/null
        pkg --check-mirror update
        pkg update -y -o Dpkg::Options::="--force-confnew"
        pkg upgrade -y -o Dpkg::Options::="--force-confnew"
    fi
}

function install_required_packages() {
    banner
    echo "${R}[${C}-${R}]${Y}${BOLD} Installing required packages..."${W}
    echo

    if type -p pacman >/dev/null 2>&1; then
        package_install_and_check "wget pv jq curl pulseaudio termux-am"
    else
        package_install_and_check "wget pv jq curl pulseaudio tar xz-utils gzip termux-am x11-repo tur-repo"
    fi

    sed -i 's/termux-am="already_exist"/ /' $config_file
    update_sys
}

function install_desktop() {
    banner

    if [[ "$desktop_answer" == "1" ]]; then
        echo "${R}[${C}-${R}]${G}${BOLD} Installing Xfce4 Desktop"${W}
        echo
        package_install_and_check "xfce4 xfce4-goodies"
    elif [[ "$desktop_answer" == "2" ]]; then
        echo "${R}[${C}-${R}]${G}${BOLD} Installing Lxqt Desktop"${W}
        echo
        package_install_and_check "lxqt openbox gtk3 papirus-icon-theme xorg-xsetroot"
    elif [[ "$desktop_answer" == "3" ]]; then
        echo "${R}[${C}-${R}]${G}${BOLD} Installing Openbox WM"${W}
        echo
        package_install_and_check "openbox polybar xorg-xsetroot lxappearance wmctrl feh termux-api thunar firefox mpd rofi bmon xcompmgr xfce4-settings gtk3 gedit"
    elif [[ "$desktop_answer" == "4" ]]; then
        echo "${R}[${C}-${R}]${G}${BOLD} Installing MATE"${W}
        echo
        package_install_and_check "mate*"
        package_install_and_check "marco mousepad xfce4-taskmanager lximage-qt"
    fi
	package_install_and_check "kvantum xwayland file-roller pavucontrol gnome-font-viewer atril galculator gdk-pixbuf"
    # Uncomment if additional package installation is needed
    # if [[ "$distro_add_answer" == "y" ]]; then
    #     package_install_and_check "xdg-utils"
    # fi
}

#########################################################################
#
# Theme Installer
#
#########################################################################
function set_config_dir() {
	if [[ "$de_name" == "xfce" ]]; then
	config_dirs=(autostart cairo-dock dconf gtk-3.0 Mousepad pulse Thunar menu ristretto rofi xfce4)
	elif [[ "$de_name" == "lxqt" ]]; then
	config_dirs=(fontconfig gtk-3.0 lxqt pcmanfm-qt QtProject.conf glib-2.0 Kvantum openbox qterminal.org)
	elif [[ "$de_name" == "openbox" ]]; then
	config_dirs=(dconf gedit Kvantum openbox pulse rofi xfce4 enchant gtk-3.0 mimeapps.list polybar QtProject.conf Thunar)
    fi
}

function theme_installer() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Configuring Theme: ${C}${style_name}"${W}
    echo

    if [[ "$de_name" == "xfce" ]] || [[ "$de_name" == "openbox" ]]; then
        package_install_and_check "gnome-themes-extra"
    fi

    sleep 3
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Configuring Wallpapers..."${W}
    echo
    check_and_create_directory "$PREFIX/share/backgrounds"
    download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/wallpaper.tar.gz" "$PREFIX/share/backgrounds/"

    banner
    check_and_create_directory "$icons_folder"
    download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/icon.tar.gz" "$icons_folder"

    if [[ "$de_name" == "xfce" ]]; then
        local icons_themes_names=$(ls $icons_folder)
        local icons_theme
        for icons_theme in $icons_themes_names; do
            if [[ -d "$icons_folder/$icons_theme" ]]; then
                echo "${R}[${C}-${R}]${G} Creating icon cache..."${W}
                gtk-update-icon-cache -f -t $icons_folder/$icons_theme
            fi
        done
    fi

    local sys_icons_themes_names=$(ls $sys_icons_folder)
    local sys_icons_theme
    for sys_icons_theme in $sys_icons_themes_names; do
        if [[ -d "$sys_icons_folder/$sys_icons_theme" ]]; then
            echo "${R}[${C}-${R}]${G} Creating icon cache..."${W}
            gtk-update-icon-cache -f -t $sys_icons_folder/$sys_icons_theme
        fi
    done

    echo "${R}[${C}-${R}]${G}${BOLD} Installing Theme..."${W}
    echo
    check_and_create_directory "$themes_folder"
    download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/theme.tar.gz" "$themes_folder"

    echo "${R}[${C}-${R}]${G} Making Additional Configuration..."${W}
    echo
    check_and_create_directory "$HOME/.config"
    set_config_dir

    for the_config_dir in "${config_dirs[@]}"; do
        check_and_delete "$HOME/.config/$the_config_dir"
    done

    if [[ "$de_name" == "openbox" ]]; then
        download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/config.tar.gz" "$HOME"
    else
        download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/config.tar.gz" "$HOME/.config/"
    fi
}

#########################################################################
#
# Install Additional Packages For Theme
#
#########################################################################

function additional_required_package_installler() {
    banner
	if [[ "$de_name" == "xfce" ]]; then
    echo "${R}[${C}-${R}]${G}${BOLD} Installing Additional Packages If Required..."${W}
	echo
	if [[ "$style_answer" == "2" ]] || [[ "$style_answer" == "5" ]] || [[ "$style_answer" == "6" ]]; then
	package_install_and_check "cairo-dock-core"
	elif [[ "$style_answer" == "2" ]] || [[ "$style_answer" == "6" ]]; then
	package_install_and_check "rofi"
	elif [[ "$style_answer" == "2" ]]; then
	package_install_and_check "fluent-icon-theme vala-panel-appmenu"
	elif [[ "$style_answer" == "4" ]]; then
    package_install_and_check "gtk2-engines-murrine"
	elif [[ "$style_answer" == "5" ]] || [[ "$style_answer" == "6" ]]; then
	cp $HOME/.config/xpple_menu/applications/* $PREFIX/share/applications/
	elif [[ "$style_answer" == "7" ]]; then
	install_font_for_style "7"
	else
	echo "${R}[${C}-${R}]${G} No Additional Packages Required For Theme: ${style_answer}"${W}
	sleep 1
	fi
	elif [[ "$de_name" == "openbox" ]]; then
	    if [[ "$style_answer" == "1" ]]; then
	    install_font_for_style "1"
		else
		echo "${R}[${C}-${R}]${G} No Additional Packages Required For Theme: ${style_answer}"${W}
	    sleep 1
	    fi
	fi
}

#########################################################################
#
# Setup Selected Style And Wallpapers
#
#########################################################################

function setup_config() {
	cd ~
	if [[ ${style_answer} =~ ^[1-9][0-9]*$ ]]; then
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Installing $de_name Style: ${C}${style_answer}"${W}
	theme_installer
	additional_required_package_installler
	fi
	if [[ "$ext_wall_answer" == "n" ]]; then
	echo "${R}[${C}-${R}]${C} Skipping Extra Wallpapers Setup..."${W}
	echo
	elif [[ "$ext_wall_answer" == "y" ]]; then
	echo "${R}[${C}-${R}]${G}${BOLD} Installing Some Extra Wallpapers..."${W}
	echo
	check_and_create_directory "$PREFIX/share/backgrounds"
	download_and_extract "https://archive.org/download/wallpaper-extra.tar/wallpaper-extra.tar.gz" "$PREFIX/share/backgrounds/"
	fi
}

function setup_folder() {
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Configuring Storage..."${W}
	echo
	while true; do
	termux-setup-storage
	sleep 4
    if [[ -d ~/storage ]]; then
	break
    else
	echo "${R}[${R}☓${R}]${R} Storage permission denied"${W}
    fi
    sleep 3
	done
	cd $HOME
	termux-reload-settings
	directories=(Desktop Music Download Pictures Videos)
	for dir in "${directories[@]}"; do
	check_and_create_directory "$HOME/storage/shared/$dir"
	done
	check_and_create_directory "$HOME/Desktop"
	ln -s "$HOME/storage/shared/Music" "$HOME/"
	ln -s "$HOME/storage/shared/Desktop" "$HOME/"
	ln -s "$HOME/storage/shared/Download" "$HOME/Downloads"
	ln -s "$HOME/storage/shared/Pictures" "$HOME/"
	ln -s "$HOME/storage/shared/Videos" "$HOME/"
}

#########################################################################
#
# Hardware Acceleration Setup
#
#########################################################################

# setup hardware acceleration, check if the enable-hw-acceleration already exist then then first check if it different from github , then ask user if they want to replace it or not, if not then continue with the lacal enable-hw-acceleration file
function hw_config() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Configuring Hardware Acceleration${W}"
    echo

    if [[ -f "${current_path}/enable-hw-acceleration" ]]; then
        local current_script_hash=$(curl -sL https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/enable-hw-acceleration | sha256sum | cut -d ' ' -f 1)
        local local_script_hash=$(basename $(sha256sum ${current_path}/enable-hw-acceleration | cut -d ' ' -f 1))

        if [[ "$local_script_hash" != "$current_script_hash" ]]; then
            echo "${R}[${C}-${R}]${G} It looks like you already have a different hw-acceleration installer in your current directory${W}"
            echo

            confirmation_y_or_n "Do you want to change it with the latest installer" change_old_hw_installer

            if [[ "$change_old_hw_installer" == "y" ]]; then
                check_and_backup "${current_path}/enable-hw-acceleration"
                wget -O ${current_path}/enable-hw-acceleration https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/enable-hw-acceleration \
                    && chmod +x ${current_path}/enable-hw-acceleration \
                    && . ${current_path}/enable-hw-acceleration
            else
                echo "${R}[${C}-${R}]${G} Using the local hardware acceleration setup file${W}"
                chmod +x ${current_path}/enable-hw-acceleration
                . ${current_path}/enable-hw-acceleration
            fi

            echo "change_old_hw_installer=\"$change_old_hw_installer\"" >> $config_file
        else
            echo "${R}[${C}-${R}]${G} Using the local hardware acceleration setup file${W}"
            chmod +x ${current_path}/enable-hw-acceleration
            . ${current_path}/enable-hw-acceleration
        fi
    else
        wget -O ${current_path}/enable-hw-acceleration https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/enable-hw-acceleration \
            && chmod +x ${current_path}/enable-hw-acceleration \
            && . ${current_path}/enable-hw-acceleration
        rm ${current_path}/enable-hw-acceleration
    fi
}

#########################################################################
#
# Proot Distro Setup
#
#########################################################################

# same as the hardware acceleration setup but for distro-container-setup file
function distro_container_setup() {
    if [[ "$distro_add_answer" == "n" ]]; then
        banner
        echo "${R}[${C}-${R}]${C} Skipping Distro Container Setup..."${W}
        echo
		hw_config
    else
        banner
        echo "${R}[${C}-${R}]${G}${BOLD} Configuring Distro Container"${W}
        echo

        if [[ -f "${current_path}/distro-container-setup" ]]; then
            local current_script_hash=$(curl -sL https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/distro-container-setup | sha256sum | cut -d ' ' -f 1)
            local local_script_hash=$(basename $(sha256sum ${current_path}/distro-container-setup | cut -d ' ' -f 1))

            if [[ "$local_script_hash" != "$current_script_hash" ]]; then
                echo "${R}[${C}-${R}]${G} It looks like you already have a different distro-container setup script in your current directory"${W}
                echo
                confirmation_y_or_n "Do you want to change it with the latest installer" change_old_distro_installer

                if [[ "$change_old_distro_installer" == "y" ]]; then
                    check_and_backup "${current_path}/distro-container-setup"
                    wget -O ${current_path}/distro-container-setup https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/distro-container-setup
					if [[ ("$1" == "--change" || "$1" == "-c") && ("$2" == "distro" || "$2" == "pd") ]]; then
					sed -i 's/\(call_from_change_d="\)[^"]*/\1y/' "${current_path}/distro-container-setup"
					fi					
                    chmod +x ${current_path}/distro-container-setup
                    . ${current_path}/distro-container-setup
                else
                    echo "${R}[${C}-${R}]${G} Using the local distro-container setup file"${W}
                    chmod +x ${current_path}/distro-container-setup
                    . ${current_path}/distro-container-setup
                fi

                echo "change_old_distro_installer=\"$change_old_distro_installer\"" >> $config_file
            else
                echo "${R}[${C}-${R}]${G} Using the local distro-container setup file"${W}
                chmod +x ${current_path}/distro-container-setup
                . ${current_path}/distro-container-setup
            fi
        else
            wget -O ${current_path}/distro-container-setup https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/distro-container-setup
			if [[ ("$1" == "--change" || "$1" == "-c") && ("$2" == "distro" || "$2" == "pd") ]]; then
			sed -i 's/\(call_from_change_d="\)[^"]*/\1y/' "${current_path}/distro-container-setup"
			fi
            chmod +x ${current_path}/distro-container-setup
            . ${current_path}/distro-container-setup
            rm ${current_path}/distro-container-setup
        fi
    fi

    echo "distro_add_answer=\"$distro_add_answer\"" >> $config_file
}

#########################################################################
#
# Add Vnc And Termux:x11 Launch Scripts
#
#########################################################################

function setup_vncstart_cmd() {
    check_and_delete "$PREFIX/bin/vncstart"

cat <<EOF > "$PREFIX/bin/vncstart"

pulseaudio --start --exit-idle-time=-1
#!/data/data/com.termux/files/usr/bin/bash

case \$1 in
--nogpu)
env XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe vncserver
;;
--help|-h)
echo "${C}vncstart ${G}to start vncserver with gpu acceleration"${W}
echo "${C}vncstart ---nogpu ${G}to start vncserver without gpu acceleration"${W}
;;
*)
${initialize_server_method} &
env XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg $hw_method vncserver
;;
esac
EOF
    chmod +x "$PREFIX/bin/vncstart"
}

function setup_vncstop_cmd() {
    check_and_delete "$PREFIX/bin/vncstop"
cat <<'EOF' > "$PREFIX/bin/vncstop"
#!/data/data/com.termux/files/usr/bin/bash

if [[ "$1" == "-f" ]]; then
pkill -9 Xtigervnc > /dev/null 2>&1
else
display_numbers=$(vncserver -list | awk '/^:[0-9]+/ {print $1}')

for display in $display_numbers; do
    vncserver -kill "$display"
done
fi
rm $HOME/.vnc/localhost:*.log > /dev/null 2>&1
rm $PREFIX/tmp/.X1-lock > /dev/null 2>&1
rm $PREFIX/tmp/.X11-unix/X1 > /dev/null 2>&1
EOF
    chmod +x "$PREFIX/bin/vncstop"
}

function setup_vnc() {
    banner
    echo "${R}[${C}-${R}]${G}${BOLD} Configuring Vnc..."${W}
    echo
    package_install_and_check "tigervnc"
    check_and_create_directory "$HOME/.vnc"
    check_and_delete "$HOME/.vnc/xstartup"
cat << EOF > "$HOME/.vnc/xstartup"
    $de_startup &
EOF
    chmod +x "$HOME/.vnc/xstartup"
	setup_vncstart_cmd
	setup_vncstop_cmd
}

function setup_tx11start_cmd() {
	check_and_delete "$PREFIX/bin/tx11start"
cat <<EOF > "$PREFIX/bin/tx11start"
#!/data/data/com.termux/files/usr/bin/bash

pulseaudio --start --exit-idle-time=-1

if [[ "\$1" == "--debug" ]]; then
case \$2 in
--nogpu)
    # Start Termux X11 without GPU acceleration
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1.0 &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe dbus-launch --exit-with-session $de_startup

    # Check if the second argument is --legacy
    if [[ "\$3" == "--legacy" ]]; then
        XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1.0 -legacy-drawing &
        sleep 1
        am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
        sleep 1
        env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg dbus-launch --exit-with-session $de_startup
    fi
    ;;

--nodbus)
    # Start Termux X11 without dbus-launch
    ${initialize_server_method} &
    env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} ${hw_method} termux-x11 :1 -xstartup "$de_startup"
    exit 0

    # Nested case to check for additional options
    case \$3 in
    --nogpu)
        env DISPLAY=:1.0 LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -xstartup "$de_startup"

        if [[ "\$4" == "--legacy" ]]; then
            env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -legacy-drawing -xstartup "$de_startup"
        fi
        ;;
    --legacy)
        ${initialize_server_method} &
        env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} ${hw_method} termux-x11 :1 -legacy-drawing -xstartup "$de_startup"
        ;;
    *)
        echo -e "${C}--legacy ${G}to start termux:x11 with -legacy-drawing${W}"
        echo -e "${C}--nogpu ${G}to start termux:x11 without GPU acceleration${W}"
        exit 0
        ;;
    esac
    ;;

--legacy)
    # Start Termux X11 with legacy drawing mode
    ${initialize_server_method} &
    sleep 1
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -legacy-drawing &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1 &
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg ${hw_method} dbus-launch --exit-with-session $de_startup
    ;;

*)
    # Default behavior: start Termux X11 with GPU acceleration and dbus
    ${initialize_server_method} &
    sleep 1
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1 &
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg ${hw_method} dbus-launch --exit-with-session $de_startup
    ;;
esac

elif [[ "\$1" == "--help" ]]; then
    # Display help information
    echo -e "${C}tx11start ${G}to start termux:x11 with GPU acceleration${W}"
    echo -e "${C}tx11start --nogpu ${G}to start termux:x11 without GPU acceleration${W}"
    echo -e "${C}tx11start --nodbus ${G}to start termux:x11 without dbus${W}"
    echo -e "${C}tx11start --legacy ${G}to start termux:x11 with -legacy-drawing${W}"
	echo -e "${C}tx11start --debug ${G}at the start to see debug log${W}"
    exit 0
else
# Main case statement to handle script arguments
case \$1 in
--nogpu)
    # Start Termux X11 without GPU acceleration
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1.0 &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe dbus-launch --exit-with-session $de_startup > /dev/null 2>&1 &

    # Check if the second argument is --legacy
    if [[ "\$2" == "--legacy" ]]; then
        XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1.0 -legacy-drawing &
        sleep 1
        am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1
        sleep 1
        env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg dbus-launch --exit-with-session $de_startup > /dev/null 2>&1 &
    fi
    ;;

--nodbus)
    # Start Termux X11 without dbus-launch
    ${initialize_server_method} &
    env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} ${hw_method} termux-x11 :1 -xstartup "$de_startup" > /dev/null 2>&1 &
    exit 0

    # Nested case to check for additional options
    case \$2 in
    --nogpu)
        env DISPLAY=:1.0 LIBGL_ALWAYS_SOFTWARE=1 MESA_LOADER_DRIVER_OVERRIDE=llvmpipe GALLIUM_DRIVER=llvmpipe XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -xstartup "$de_startup" > /dev/null 2>&1 &

        if [[ "\$3" == "--legacy" ]]; then
            env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -legacy-drawing -xstartup "$de_startup" > /dev/null 2>&1 &
        fi
        ;;
    --legacy)
        ${initialize_server_method} &
        env DISPLAY=:1.0 XDG_RUNTIME_DIR=\${TMPDIR} ${hw_method} termux-x11 :1 -legacy-drawing -xstartup "$de_startup" > /dev/null 2>&1 &
        ;;
    *)
        echo -e "${C}--legacy ${G}to start termux:x11 with -legacy-drawing${W}"
        echo -e "${C}--nogpu ${G}to start termux:x11 without GPU acceleration${W}"
        exit 0
        ;;
    esac
    ;;

--legacy)
    # Start Termux X11 with legacy drawing mode
    ${initialize_server_method} &
    sleep 1
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 -legacy-drawing &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1 &
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg ${hw_method} dbus-launch --exit-with-session $de_startup > /dev/null 2>&1 &
    ;;
*)
    # Default behavior: start Termux X11 with GPU acceleration and dbus
    ${initialize_server_method} &
    sleep 1
    XDG_RUNTIME_DIR=\${TMPDIR} termux-x11 :1 &
    sleep 1
    am start --user 0 -n com.termux.x11/com.termux.x11.MainActivity > /dev/null 2>&1 &
    sleep 1
    env DISPLAY=:1.0 XDG_CONFIG_DIRS=/data/data/com.termux/files/usr/etc/xdg ${hw_method} dbus-launch --exit-with-session $de_startup > /dev/null 2>&1 &
    ;;
esac
fi
EOF

if [[ "$de_name" == "xfce" ]]; then
cat <<'EOF' >> "$PREFIX/bin/tx11start"
sleep 5
process_id=$(ps -aux | grep '[x]fce4-screensaver' | awk '{print $2}')
kill "$process_id" > /dev/null 2>&1
EOF
fi
chmod +x $PREFIX/bin/tx11start
}

function setup_tx11stop_cmd() {
	check_and_delete "$PREFIX/bin/tx11stop"
if [[ "$de_name" == "openbox" ]]; then
cat <<EOF > "$PREFIX/bin/tx11stop"
#!/data/data/com.termux/files/usr/bin/bash

termux_x11_pid=\$(pgrep -f "/system/bin/app_process / com.termux.x11.Loader :1.0")
de_pid=\$(pgrep -f "$de_startup")
if [[ -n "\$termux_x11_pid" ]] || [[ -n "\$de_pid" ]]; then
kill -9 "\$termux_x11_pid" > /dev/null 2>&1
pkill -9 pulseaudio > /dev/null 2>&1
killall virgl_test_server > /dev/null 2>&1
pkill -9 openbox* > /dev/null 2>&1
pkill -9 dbus-* > /dev/null 2>&1
pkill -f com.termux.x11 > /dev/null 2>&1
	if [[ ! -n "\$termux_x11_pid" ]] || [[ ! -n "\$de_pid" ]]; then
	echo -e "${G}Termux:X11 Stopped Successfully ${W}"
	fi
elif [[ "\$1" == "-f" ]]; then
pkill -f com.termux.x11 > /dev/null 2>&1
pkill -9 openbox* > /dev/null 2>&1
killall virgl_test_server > /dev/null 2>&1
pkill -9 pulseaudio > /dev/null 2>&1
pkill -9 dbus-* > /dev/null 2>&1
echo -e "${G}Termux:X11 Successfully Force Stopped ${W}"
elif [[ "\$1" == "-h" ]]; then
echo -e "tx11stop       to stop termux:x11"
echo -e "tx11stop -f    to kill termux:x11"
fi
exec 2>/dev/null
EOF
else
cat <<EOF > "$PREFIX/bin/tx11stop"
#!/data/data/com.termux/files/usr/bin/bash

termux_x11_pid=\$(pgrep -f "/system/bin/app_process / com.termux.x11.Loader :1.0")
de_pid=\$(pgrep -f "$de_startup")
if [[ -n "\$termux_x11_pid" ]] || [[ -n "\$de_pid" ]]; then
kill -9 "\$termux_x11_pid" > /dev/null 2>&1
pkill -9 pulseaudio > /dev/null 2>&1
killall virgl_test_server > /dev/null 2>&1
pkill -9 $de_name-* > /dev/null 2>&1
pkill -9 dbus-* > /dev/null 2>&1
pkill -f com.termux.x11 > /dev/null 2>&1
	if [[ ! -n "\$termux_x11_pid" ]] || [[ ! -n "\$de_pid" ]]; then
	echo -e "${G}Termux:X11 Stopped Successfully ${W}"
	fi
elif [[ "\$1" == "-f" ]]; then
pkill -f com.termux.x11 > /dev/null 2>&1
pkill -9 $de_name-* > /dev/null 2>&1
killall virgl_test_server > /dev/null 2>&1
pkill -9 pulseaudio > /dev/null 2>&1
pkill -9 dbus-* > /dev/null 2>&1
echo -e "${G}Termux:X11 Successfully Force Stopped ${W}"
elif [[ "\$1" == "-h" ]]; then
echo -e "tx11stop       to stop termux:x11"
echo -e "tx11stop -f    to kill termux:x11"
fi
exec 2>/dev/null
EOF
fi
chmod +x $PREFIX/bin/tx11stop
}

function setup_termux_x11() {
	banner
        echo "${R}[${C}-${R}]${G}${BOLD} Configuring Termux:X11 "${W}
        echo
        package_install_and_check "termux-x11-nightly"
		local repo_owner="termux"
		local repo_name="termux-x11"
		local latest_tag
		latest_tag=$(get_latest_release "$repo_owner" "$repo_name")
		local termux_x11_url="https://github.com/$repo_owner/$repo_name/releases/download/$latest_tag/"
		local assets
		assets=$(curl -s "https://api.github.com/repos/$repo_owner/$repo_name/releases/latest" | grep -oP '(?<="name": ")[^"]*')
		deb_assets=$(echo "$assets" | grep termux-x11.*all.deb)
		wget -O $current_path/termux-x11.deb $termux_x11_url/$deb_assets
		apt install $current_path/termux-x11.deb -y
		rm $current_path/termux-x11.deb
		sed -i '12s/^#//' $HOME/.termux/termux.properties
		setup_tx11start_cmd
		setup_tx11stop_cmd
}

function gui_termux_x11() {
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
--start|-l)
tx11start
;;
--stop|-s)
tx11stop
;;
--kill|-k|-kill)
tx11stop -f
;;
--help|-h)
echo -e "${G} Use ${C}gui --start / gui -l ${G}to start termux:x11\n Use ${C}gui --stop / gui -s ${G}to stop termux:x11"${W}
;;
*)
echo "${R}Invalid choise"${W}
gui -h
;;
esac
EOF
}

function gui_vnc() {
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
--start|-l)
vncstart
;;
--stop|-s)
vncstop
;;
--kill|-k|-kill)
vncstop -f
;;
--help|-h)
echo -e "${G} Use ${C}gui --start / gui -l ${G}to start vnc\n Use ${C}gui --stop / gui -s ${G}to stop vnc"${W}
;;
*)
echo "${R}Invalid choise"${W}
gui -h
;;
esac
EOF
}

function gui_both() {
cat << EOF > "$PREFIX/bin/gui"
#!/data/data/com.termux/files/usr/bin/bash
case \$1 in
    --start|-l)
        case \$2 in
            tx11)
                tx11start
                ;;
            vnc)
                vncstart
                ;;
            *)
                echo -e "${R}Invalid choise. Use ${C}tx11${R} or ${C}vnc ${G}with it${W}"
                ;;
        esac
        ;;
	--kill|-k|-kill)
	vncstop -f > /dev/null 2>&1
	tx11stop -f > /dev/null 2>&1
	echo -e "${G}Gui services killed successfully ${W}"
	;;
    --stop|-s)
        case \$2 in
            tx11)
                tx11stop
                ;;
            vnc)
                vncstop
                ;;
            *)
                echo -e "${R}Invalid choise. Use ${C}tx11${R} or ${C}vnc ${G}with it${W}"
                ;;
        esac
        ;;
    --help|-h)
        echo -e "${G}Use ${C}gui --start tx11/vnc${G} or ${C}gui -l tx11/vnc${G} to start a gui"
        echo -e "Use ${C}gui --stop tx11/vnc${G} or ${C}gui -s tx11/vnc${G} to stop a gui${W}"
		echo -e "Use ${C}gui --kill ${G} To kill both at once${W}"
        ;;
    *)
        echo -e "${R}Invalid choice${W}"
        gui -h
        ;;
esac
EOF
}

function gui_launcher() {
	check_and_delete "$PREFIX/bin/gui"
	package_install_and_check "xorg-xhost"
	if [[ "$gui_mode" == "1" ]]; then
	setup_termux_x11
	echo "gui_mode=\"termux_x11\"" >> $config_file
	gui_termux_x11
	elif [[ "$gui_mode" == "2" ]]; then
	setup_vnc
	echo "gui_mode=\"vnc\"" >> $config_file
	gui_vnc
	elif [[ "$gui_mode" == "3" ]]; then
	setup_termux_x11
	setup_vnc
	echo "gui_mode=\"both\"" >> $config_file
	gui_both
	else
	setup_termux_x11
	echo "gui_mode=\"termux_x11\"" >> $config_file
	gui_termux_x11
	fi
	chmod +x "$PREFIX/bin/gui"
	check_and_create_directory "$PREFIX/share/applications/"
cat <<EOF > "$PREFIX/share/applications/killgui.desktop"
[Desktop Entry]
Version=1.0
Type=Application
Name=Stop Desktop
Comment=Kill or stop termux desktop
Exec=gui --kill
Icon=system-shutdown
Categories=System;
Path=
Terminal=false
StartupNotify=false
EOF
	chmod 644 $PREFIX/share/applications/killgui.desktop
	cp $PREFIX/share/applications/killgui.desktop $HOME/Desktop/
}

#########################################################################
#
# Install Browser
#
#########################################################################

function browser_installer() {
	banner
	if [[ ${browser_answer} == "1" ]]; then
		package_install_and_check "firefox"
	echo "installed_browser=\"firefox\"" >> $config_file
	elif [[ ${browser_answer} == "2" ]]; then
	package_install_and_check "chromium"
	echo "installed_browser=\"chromium\"" >> $config_file
	elif [[ ${browser_answer} == "3" ]]; then
	package_install_and_check "firefox chromium"
	echo "installed_browser=\"both\"" >> $config_file
	elif [[ ${browser_answer} == "4" ]]; then
    echo "${R}[${C}-${R}]${C} Skipping Browser Installation..."${W}
	echo "installed_browser=\"skip\"" >> $config_file
	echo
	sleep 2
	else
	package_install_and_check "firefox"
	echo "installed_browser=\"firefox\"" >> $config_file
	fi
}

#########################################################################
#
# Install Ide
#
#########################################################################

function ide_installer() {
	banner
	if [[ ${ide_answer} == "1" ]]; then
		package_install_and_check "code-oss code-is-code-oss"
	echo "installed_ide=\"code\"" >> $config_file
	elif [[ ${ide_answer} == "2" ]]; then
		package_install_and_check "geany"
	echo "installed_ide=\"geany\"" >> $config_file
	elif [[ ${ide_answer} == "3" ]]; then
		package_install_and_check "code-oss code-is-code-oss geany"
	echo "installed_ide=\"both\"" >> $config_file
	elif [[ ${ide_answer} == "4" ]]; then
    echo "${R}[${C}-${R}]${C} Skipping Ide Installation..."${W}
	echo
	echo "installed_ide=\"skip\"" >> $config_file
	sleep 2
	else
		package_install_and_check "code-oss code-is-code-oss"
	echo "installed_ide=\"code\"" >> $config_file
	fi
}

#########################################################################
#
# Install Media Player
#
#########################################################################

function media_player_installer() {
	banner
	if [[ ${player_answer} == "1" ]]; then
		package_install_and_check "vlc-qt-static"
	echo "installed_media_player=\"vlc\"" >> $config_file
	elif [[ ${player_answer} == "2" ]]; then
		package_install_and_check "audacious"
	echo "installed_media_player=\"audacious\"" >> $config_file
	elif [[ ${player_answer} == "3" ]]; then
		package_install_and_check "vlc-qt-static audacious"
	echo "installed_media_player=\"both\"" >> $config_file
	elif [[ ${player_answer} == "4" ]]; then
    echo "${R}[${C}-${R}]${C} Skipping Media Player Installation..."${W}
	echo
	sleep 2
	echo "installed_media_player=\"skip\"" >> $config_file
	else
		package_install_and_check "vlc-qt-static"
	echo "installed_media_player=\"vlc\"" >> $config_file
	fi
}

#########################################################################
#
# Install Photo Editor
#
#########################################################################

function photo_editor_installer() {
	banner
	if [[ ${photo_editor_answer} == "1" ]]; then
		package_install_and_check "gimp"
	echo "installed_photo_editor=\"gimp\"" >> $config_file
	elif [[ ${photo_editor_answer} == "2" ]]; then
		package_install_and_check "inkscape"
	echo "installed_photo_editor=\"inkscape\"" >> $config_file
	elif [[ ${photo_editor_answer} == "3" ]]; then
		package_install_and_check "gimp inkscape"
	echo "installed_photo_editor=\"both\"" >> $config_file
	elif [[ ${photo_editor_answer} == "4" ]]; then
    echo "${R}[${C}-${R}]${C} Skipping Photo Editor Installation..."${W}
	echo
	sleep 2
	echo "installed_photo_editor=\"skip\"" >> $config_file
	else
		package_install_and_check "gimp"
	echo "installed_photo_editor=\"gimp\"" >> $config_file
	fi

}

#########################################################################
#
# Install Software Manager
#
#########################################################################

function setup_synaptic() {
	banner
    if [[ "$synaptic_answer" == "n" ]]; then
	banner
    echo "${R}[${C}-${R}]${C} Skipping Synaptic Setup.."${W}
	echo
    sleep 1.5
	else
	echo "${R}[${C}-${R}]${G} Installing Synaptic Graphical Package Manager..."${W}
	echo
	package_install_and_check "synaptic"
	fi
	echo "install_synaptic=\"$synaptic_answer\"" >> $config_file
}

#########################################################################
#
# Setup Zsh And Terminal Utility
#
#########################################################################

function get_shellrc_path() {
	if [[ "$shell_name" == "bash" ]]; then
	shell_rc_file="/data/data/com.termux/files/usr/etc/bash.bashrc"
	elif [[ "$shell_name" == "zsh" ]]; then
	shell_rc_file="$HOME/.zshrc"
	fi
}

function setup_zsh() {
	banner
    if [[ "$zsh_answer" == "n" ]]; then
	echo "${R}[${C}-${R}]${C} Canceling Zsh Setup..."${W}
    sleep 1.5
	shell_name="bash"
	else
	shell_name="zsh"
	echo "${R}[${C}-${R}]${G}${BOLD} Configuring Zsh.."${W}
	echo
	package_install_and_check "zsh git"
	wget https://raw.githubusercontent.com/sabamdarif/simple-linux-scripts/main/install-zsh.sh
	if [[ "$distro_add_answer" == "y" ]]; then
	bash install-zsh.sh -u "$user_name"
	else
	bash install-zsh.sh
	fi
	check_and_delete "install-zsh.sh"
	clear
	fi
	get_shellrc_path
	echo "zsh_answer=\"$zsh_answer\"" >> $config_file
}

function terminal_utility_setup() {
	if [[ "$terminal_utility_setup_answer" == "n" ]]; then
    banner
	echo "${R}[${C}-${R}]${C} Skipping Terminal Utility Setup..."${W}
	echo
	else
	banner
	echo "${R}[${C}-${R}]${C}${BOLD} Configuring Terminal Utility For Termux..."${W}
	echo
	check_and_backup "$PREFIX/etc/motd"
	check_and_backup "$PREFIX/etc/motd-playstore"
    check_and_backup "$PREFIX/etc/motd.sh"
	wget -O $PREFIX/etc/motd.sh https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/other/motd.sh
	if grep -q "motd.sh$" "$PREFIX/etc/termux-login.sh"; then
	sed -i "s|.*motd\.sh$|bash $PREFIX/etc/motd.sh|" "$PREFIX/etc/termux-login.sh"
    else
	echo "bash $PREFIX/etc/motd.sh" >> "$PREFIX/etc/termux-login.sh"
    fi
	check_and_create_directory "$HOME/.termux"
	check_and_backup "$HOME/.termux/colors.properties"
	wget -O $HOME/.termux/colors.properties https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/other/colors.properties
	package_install_and_check "openssh"
	wget -O $PREFIX/bin/termux-ssh https://raw.githubusercontent.com/sabamdarif/simple-linux-scripts/main/termux-ssh
	chmod +x $PREFIX/bin/termux-ssh
	cp $shell_rc_file ${shell_rc_file}-2
	check_and_backup "$shell_rc_file"
	mv ${shell_rc_file}-2 ${shell_rc_file}
	if type -p pacman >/dev/null 2>&1; then
	package_install_and_check "bat eza zoxide fastfetch"
	else
	package_install_and_check "aptitude bat eza zoxide fastfetch"
cat <<'EOF' >> "$shell_rc_file"
alias apt='aptitude $@'
alias pkg='aptitude $@'
EOF
	fi
cat <<'EOF' >> "$shell_rc_file"
alias cat='bat $@'
alias ls='eza --icons $@'
alias mkdir='mkdir -p'
alias neofetch='fastfetch'
alias startssh='termux-ssh'
alias stopssh='termux-ssh stop'
#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s)
extract() {
	for archive in "$@"; do
    if [[ ! -f "$archive" ]]; then
        echo "Error: '$archive' does not exist!"
        continue
    fi

    total_size=$(stat -c '%s' "$archive")

    case "$archive" in
        *.tar.gz|*.tgz)
            pv -s "$total_size" "$archive" | tar xzf -
            ;;
        *.tar.xz)
            pv -s "$total_size" "$archive" | tar xJf -
            ;;
        *.tar.bz2|*.tbz2)
            pv -s "$total_size" "$archive" | tar xjf -
            ;;
        *.tar)
            pv -s "$total_size" "$archive" | tar xf -
            ;;
        *.bz2)
            pv -s "$total_size" "$archive" | bunzip2 > "${archive%.bz2}"
            ;;
        *.gz)
            pv -s "$total_size" "$archive" | gunzip > "${archive%.gz}"
            ;;
        *.7z)
            pv -s "$total_size" "$archive" | 7z x -si -y > /dev/null
            ;;
        *.rar)
            pv -s "$total_size" "$archive" | unrar x -
            ;;
        *.zip)
            pv -s "$total_size" "$archive" | unzip -
            ;;
        *.Z)
            pv -s "$total_size" "$archive" | uncompress -
            ;;
        *)
            echo "Unsupported archive format: $archive"
            ;;
    esac
	done
}
# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}
# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}
# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}
# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}
EOF
cat <<EOF >> "$shell_rc_file"
# set zoxide as cd
eval "\$(zoxide init --cmd cd ${shell_name})"
EOF
termux-reload-settings
sleep 2
	fi
echo -e "
# print your current termux-desktop configuration
alias 'tdconfig'='cat $config_file'
# open the folder where all the apps added by proot-distro are located
alias 'pdapps'='cd /data/data/com.termux/files/usr/share/applications/pd_added'
" >> $HOME/.${shell_name}rc
echo "terminal_utility_setup_answer=\"$terminal_utility_setup_answer\"" >> $config_file
}

#########################################################################
#
# Install Fonts
#
#########################################################################

function setup_fonts() {
	if [[ "$terminal_utility_setup_answer" == "y" ]]; then
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Installing Fonts..."${W}
	package_install_and_check "nerdfix fontconfig-utils"
	check_and_create_directory "$HOME/.termux"
	check_and_create_directory "$HOME/.fonts"
	check_and_backup "$HOME/.termux/font.ttf"
	download_and_extract "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/0xProto.zip" "$HOME/.fonts"
	clear
	check_and_delete "$HOME/.fonts/README.md $HOME/.fonts/LICENSE"
	cp $HOME/.fonts/0xProtoNerdFont-Regular.ttf $HOME/.termux/font.ttf
	fc-cache -f
	check_and_create_directory "$HOME/.config/fastfetch"
	wget -O $HOME/.config/fastfetch/config.jsonc https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/other/config.jsonc 
	fi
}

#########################################################################
#
# Install Wine
#
#########################################################################

function wine_shortcut() {
cat << EOF > $PREFIX/share/applications/wine-explorer.desktop
[Desktop Entry]
Name=Wine File
Comment=Wine File Browser
Name[ar]=مدير ملفات واين
Comment[ar]=إدارة الملفات بطريقة واين
Exec=wine explorer
Icon=winefile
Terminal=false
Type=Application
Categories=X-Wine;
X-Desktop-File-Install-Version=0.26
EOF
chmod +x $PREFIX/share/applications/wine-explorer.desktop
cat << EOF > $PREFIX/share/applications/wine-winecfg.desktop
[Desktop Entry]
Name=Wine Configuration
Comment=Interface to set wine parameters
Name[ar]=إعدادات واين
Comment[ar]=لوحة تحكم بمنظومة واين
Exec=wine winecfg
Icon=winecfg
Terminal=false
Type=Application
StartupNotify=true
StartupWMClass=winecfg.exe
Categories=X-Wine;
X-Desktop-File-Install-Version=0.26
EOF
chmod +x $PREFIX/share/applications/wine-winecfg.desktop
cat << EOF > $PREFIX/share/applications/wine-uninstaller.desktop
[Desktop Entry]
Name=Wine Software Uninstaller
Comment=Interface to uninstall software
Name[ar]=مزيل التطبيقات من واين
Comment[ar]=واجهة إزالة التّطبيقات من واين
Exec=wine uninstaller
Icon=msiexec
Terminal=false
Type=Application
StartupNotify=true
StartupWMClass=uninstaller.exe
Categories=X-Wine;
X-Desktop-File-Install-Version=0.26
EOF
chmod +x $PREFIX/share/applications/wine-uninstaller.desktop
cat << EOF > $PREFIX/share/applications/wine-regedit.desktop
[Desktop Entry]
Name=Regedit
Comment=Wine registry editor
Name[ar]=محرر السّجل
Comment[ar]=محرر لسجلات واين
Exec=wine regedit
Icon=regedit
Terminal=false
Type=Application
StartupNotify=true
StartupWMClass=regedit.exe
Categories=X-Wine;
X-Desktop-File-Install-Version=0.26
EOF
chmod +x $PREFIX/share/applications/wine-regedit.desktop
cat << EOF > $PREFIX/share/applications/wine-wineboot.desktop
[Desktop Entry]
Name=Wine Boot
Comment=Simulate restart
Name[ar]=إقلاع واين
Comment[ar]=محاكاة إعادة التشغيل لواين
Exec=wine wineboot
Icon=wine
Terminal=false
Type=Application
Categories=X-Wine;
X-Desktop-File-Install-Version=0.26
EOF
chmod +x $PREFIX/share/applications/wine-wineboot.desktop
}

function setup_wine() {
	banner
    if [[ "$wine_answer" == "1" ]]; then
	echo "${R}[${C}-${R}]${G}${BOLD} Installing Wine Natively In Termux"${W}
	echo
	package_install_and_check "wine-stable winetricks"
	wine_shortcut
	echo "setup_wine=\"default-wine\"" >> $config_file
	elif [[ "$wine_answer" == "2" ]]; then
	echo "${R}[${C}-${R}]${G}${BOLD} Addind Mobox Launch Option To Termux"${W}
	echo
	echo "${R}[${C}-${R}]${C}${BOLD} After the installation finishes, make sure to install Mobox using their official instructions"${W}
	echo
	echo "${R}[${C}-${R}]${G}${BOLD} Mobox:- ${C}https://github.com/olegos2/mobox"${W}
	echo
	sleep 4
	wget -O $PREFIX/bin/wine https://raw.githubusercontent.com/LinuxDroidMaster/Termux-Desktops/main/scripts/termux_native/mobox_run.sh
	chmod +x $PREFIX/bin/wine
	wine_shortcut
	cp $PREFIX/share/applications/wine-explorer.desktop $HOME/Desktop/MoboxExplorer.desktop
	echo "setup_wine=\"mobox\"" >> $config_file
	elif [[ "$wine_answer" == "3" ]]; then
	package_install_and_check "hangover hangover-wine winetricks"
	wine_shortcut
	echo "setup_wine=\"hangover-wine\"" >> $config_file
	elif [[ "$wine_answer" == "4" ]]; then
	echo "${R}[${C}-${R}]${C} Skipping wine Installation..."${W}
	echo "setup_wine=\"skip\"" >> $config_file
	else
    echo "${R}[${C}-${R}]${G} Installing Wine Natively In Termux"${W}
	echo
	package_install_and_check "wine-stable winetricks"
	wine_shortcut
	echo "setup_wine=\"default-wine\"" >> $config_file
	fi
}

#########################################################################
#
# Add Autostart
#
#########################################################################

function add_vnc_autostart() {
	echo "${R}[${C}-${R}]${G}${BOLD} Adding vnc to autostart"${W}
	if grep -q "^vncstart" $shell_rc_file; then
	echo "${R}[${C}-${R}]${G} Termux:X11 start already exist"${W}
	else
cat << EOF >> "$shell_rc_file"
# Start Vnc
if ! pgrep Xvnc > /dev/null; then
echo "${G}Starting Vnc...${W}"
vncstart
fi
EOF
	fi
}

function add_tx11_autostart() {
	echo "${R}[${C}-${R}]${G}${BOLD} Adding Termux:x11 to autostart"${W}
	if grep -q "^tx11start" $shell_rc_file; then
	echo "${R}[${C}-${R}]${G} Termux:X11 start already exist"${W}
	else
cat << EOF >> "$shell_rc_file"
# Start Termux:X11
termux_x11_pid=\$(pgrep -f "app_process -Xnoimage-dex2oat / com.termux.x11.Loader :1")
if [ !-n "\$termux_x11_pid" ]; then
echo "${G}Starting Termux:x11...${W}"
tx11start
fi
EOF
	fi
}

function add_to_autostart() {
	if [[ "$de_on_startup" == "y" ]]; then
	   if [[ "$gui_mode" == "3" ]]; then
	      if [[ "$autostart_gui_mode" == "2" ]]; then
		  add_vnc_autostart
		  elif [[ "$autostart_gui_mode" == "1" ]]; then
		  add_tx11_autostart
		  else
		  add_tx11_autostart
		  fi
		elif [[ "$gui_mode" == "2" ]]; then
		add_vnc_autostart
		elif [[ "$gui_mode" == "1" ]]; then
		add_tx11_autostart
		else
		add_tx11_autostart
	   fi
	fi
	echo "de_on_startup=\"$de_on_startup\"" >> $config_file
}


#########################################################################
#
# Finish | Notes
#
#########################################################################
function cleanup_cache() {
	banner
	echo "${R}[${C}-${R}]${G} Cleaning up the cache..."${W}
	if type -p pacman >/dev/null 2>&1; then
	pacman -Scc
	else
	apt clean all
	fi
}

function add_common_function() {
	check_and_delete "$PREFIX/etc/termux-desktop/common_functions"
cat <<'EOF' > "$PREFIX/etc/termux-desktop/common_functions"
R="$(printf '\033[1;31m')"
G="$(printf '\033[1;32m')"
Y="$(printf '\033[1;33m')"
B="$(printf '\033[1;34m')"
C="$(printf '\033[1;36m')"
W="$(printf '\033[0m')"
BOLD="$(printf '\033[1m')"
termux_desktop_path="$PREFIX/etc/termux-desktop"
config_file="$termux_desktop_path/configuration"
EOF
declare -f check_termux debug check_and_create_directory check_and_delete check_and_backup check_and_restore package_install_and_check package_check_and_remove get_file_name_number extract_archive download_and_extract count_subfolders confirmation_y_or_n get_latest_release >> "$PREFIX/etc/termux-desktop/common_functions"
chmod +x $PREFIX/etc/termux-desktop/common_functions
}

function delete_installer_file() {
	current_script_path="$(realpath "$0")"
	if [[ "$current_script_path" != */bin* ]]; then
	    if [[ -f "${current_path}/setup-termux-desktop" ]]; then
		(exec rm -- "${current_path}/setup-termux-desktop") &
		else
		echo "${R}[${R}☓${R}]${R}Installer file not found"${W}
		fi
	fi
}

function notes() {
	banner
	echo "${R}[${C}-${R}]${G}${BOLD} Installation Successfull..."${W}
	echo
	sleep 2
	echo "${R}[${C}-${R}]${C}${BOLD} Now Restart Termux ${G}(Must)"${W}
	echo
	echo "${R}[${C}-${R}]${C}${BOLD} See Uses Section in github to know how to use it"${W}
	echo
	echo "${R}[${C}-${R}]${C} URL:- ${B}https://github.com/sabamdarif/termux-desktop/blob/main/README.md#uses"${W}
	echo
	if [[ "$distro_add_answer" == "y" ]]; then
	echo "${R}[${C}-${R}]${C}${BOLD} See how to use distro container"${W}
	echo
	echo "${R}[${C}-${R}]${C} URL:- ${B}https://github.com/sabamdarif/termux-desktop/blob/main/proot-caontainer.md"${W}
	fi
}

#########################################################################
#
# Remove
#
#########################################################################

function remove_termux_desktop() {
	if [[ ! -e "$config_file" ]]; then
	echo "${R}[${C}-${R}]${C}${BOLD} Please Install Termux Desktop First"${W}
	exit 0
	else
	banner
	echo "${R}[${C}-${R}]${R}${BOLD} Remove Termux Desktop"${W}
	echo ""
	confirmation_y_or_n "Are You Sure You Want To Remove Termux Desktop Completely" ask_remove
	if [[ "$ask_remove" == "n" ]]; then
	echo "${R}[${C}-${R}]${G}${BOLD} Canceling..."${W}
	exit 0
	else
	echo "${R}[${C}-${R}]${R}${BOLD} Removeing Termux Desktop"${W}
	sleep 3
	. $config_file
	#remove basic packages
	echo "${package_name}=\"already_exist\"" >> $config_file
	package_check_and_remove "pulseaudio x11-repo tur-repo"
	#remove desktop related packages
	if [[ "$de_name" == "xfce" ]]; then
	package_check_and_remove "xfce4 xfce4-goodies xwayland kvantum"
	elif [[ "$de_name" == "lxqt" ]]; then
	package_check_and_remove "lxqt xorg-xsetroot papirus-icon-theme xwayland kvantum"
	elif [[ "$de_name" == "openbox" ]]; then
	package_check_and_remove "openbox polybar xorg-xsetroot lxappearance wmctrl feh xwayland kvantum thunar firefox mpd rofi bmon xcompmgr xfce4-settings gedit"
	fi
	#remove zsh
	if [[ "$zsh_answer" == "y" ]]; then
	package_check_and_remove "zsh"
	check_and_delete ".oh-my-zsh .zsh_history .zshrc"
	fi
	#remove terminal utility
	if [[ "$terminal_utility_setup_answer" == "y" ]]; then
	check_and_delete "$PREFIX/etc/motd.sh $HOME/.termux $HOME/.fonts/font.ttf $HOME/.termux/colors.properties"
	check_and_restore "$PREFIX/etc/motd"
	check_and_restore "$PREFIX/etc/motd-playstore"
	check_and_restore "$PREFIX/etc/motd.sh"
	check_and_restore "$HOME/.termux/colors.properties"
	if grep -q "motd.sh$" "$PREFIX/etc/termux-login.sh"; then
	sed -i "s|.*motd\.sh$|# |" "$PREFIX/etc/termux-login.sh"
	fi
	package_check_and_remove "nerdfix fontconfig-utils aptitude bat eza"
	fi
	#remove browser
	if [[ "$installed_browser" == "firefox" ]]; then
	package_check_and_remove "firefox"
	elif [[ "$installed_browser" == "chromium" ]]; then
	package_check_and_remove "chromium"
	elif [[ "$installed_browser" == "both" ]]; then
	package_check_and_remove "firefox chromium"
	fi
	#remove ide
	if [[ "$installed_ide" == "code" ]]; then
	package_check_and_remove "code-oss code-is-code-oss"
	elif [[ "$installed_ide" == "geany" ]]; then
	package_check_and_remove "geany"
	elif [[ "$installed_ide" == "both" ]]; then
	package_check_and_remove "code-oss code-is-code-oss geany"
	fi
	#remove media player
	if [[ "$installed_media_player" == "vlc" ]]; then
	package_check_and_remove "vlc-qt-static"
	elif [[ "$installed_media_player" == "audacious" ]]; then
	package_check_and_remove "audacious"
	elif [[ "$installed_media_player" == "both" ]]; then
	package_check_and_remove "vlc-qt-static audacious"
	fi
	#remove photo editor
	if [[ "$installed_photo_editor" == "gimp" ]]; then
	package_check_and_remove "gimp"
	elif [[ "$installed_photo_editor" == "audacious" ]]; then
	package_check_and_remove "audacious"
	elif [[ "$installed_photo_editor" == "both" ]]; then
	package_check_and_remove "gimp audacious"
	fi
	#remove synaptic
	if [[ "$install_synaptic" == "y" ]]; then
	package_check_and_remove "synaptic"
	fi
	#remove wine
	if [[ "$setup_wine" == "default-wine" ]]; then
	package_check_and_remove "wine winetricks"
	elif [[ "$setup_wine" == "mobox" ]]; then
	echo "${R}[${C}-${R}]${C}${BOLD} Make Sure To Uninstall Mobox Using Their Instruction"${W}
	check_and_delete "$HOME/Desktop/MoboxExplorer.desktop"
	sleep 4
	elif [[ "$setup_wine" == "hangover-wine" ]]; then
	package_check_and_remove "hangover-wine winetricks"
	fi
	check_and_delete "$PREFIX/bin/wine $PREFIX/share/applications/wine-*"
	#remove styles
	if [[ "$style_name" == "Modern Style" ]] || [[ "$style_name" == "MacOS Inspired-1 Style" ]] || [[ "$style_name" == "MacOS Inspired-2 Style" ]]; then
	package_check_and_remove "cairo-dock-core"
	elif [[ "$style_name" == "Modern Style" ]] || [[ "$style_name" == "MacOS Inspired-2 Style" ]]; then
	package_check_and_remove "rofi"
	elif [[ "$style_name" == "Modern Style" ]]; then
	package_check_and_remove "fluent-icon-theme vala-panel-appmenu"
	elif [[ "$style_name" == "Windows10 Style" ]]; then
	package_check_and_remove "gtk2-engines-murrine"
	fi
	#Remove folders and other files
	check_and_delete "$PREFIX/share/backgrounds $themes_folder $icons_folder $PREFIX/etc/termux-desktop"
	check_and_delete "$HOME/.config/$the_config_dir"
	check_and_delete "$HOME/Desktop $HOME/Downloads $HOME/Videos $HOME/Pictures $HOME/Music"
	#remove hw packages
	package_check_and_remove "mesa-zink virglrenderer-mesa-zink vulkan-loader-android angle-android virglrenderer-android mesa-vulkan-icd-freedreno mesa-zink"
	#remove distro container
	if [[ "$distro_add_answer" == "y" ]]; then
	proot-distro remove $selected_distro
	proot-distro clear-cache
	package_check_and_remove "proot-distro"
	check_and_delete "$PREFIX/bin/$selected_distro $PREFIX/bin/pdrun"
	fi
	#remove vnc and termux x11
	check_and_delete "$PREFIX/bin/gui"
	if [[ "$gui_mode" == "termux_x11" ]]; then
	package_check_and_remove "termux-x11-nightly xorg-xhost"
	check_and_delete "$PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	elif [[ "$gui_mode" == "vnc" ]]; then
	package_check_and_remove "tigervnc xorg-xhost"
	check_and_delete "$HOME/.vnc/xstartup $PREFIX/bin/vncstart $PREFIX/bin/vncstop $PREFIX/bin/gui $PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	elif [[ "$gui_mode" == "both" ]]; then
	package_check_and_remove "termux-x11-nightly tigervnc xorg-xhost"
	check_and_delete "$PREFIX/bin/tx11start $PREFIX/bin/tx11stop $HOME/.vnc/xstartup $PREFIX/bin/vncstart $PREFIX/bin/vncstop $PREFIX/bin/gui $PREFIX/bin/tx11start $PREFIX/bin/tx11stop"
	fi
	check_and_delete "$PREFIX/etc/termux-desktop $PREFIX/bin/setup-termux-desktop"
	clear
	echo "${R}[${C}-${R}]${G}${BOLD} Everything remove successfully"${W}
	fi
	fi
}

#########################################################################
#
# Change Style
#
#########################################################################

function gui_check_up() {
termux_x11_pid=$(pgrep -f /system/bin/app_process.*com.termux.x11.Loader)
de_pid=$(pgrep -f "$de_startup")
if [ -n "$termux_x11_pid" ] || [ -n "$de_pid" ] >/dev/null 2>&1; then
echo "${G}Please Stop The Gui Desktop Server First"${W}
exit 0
fi
}

function change_style() {
	if [[ ! -e "$config_file" ]]; then
	echo -e "${C} It look like you haven't install the desktop yet\n Please install the desktop first"${W}
	exit 0
	else
	gui_check_up
	. $config_file
	banner
	echo "${R}[${C}-${R}]${G} Your currently installed style is ${C}${BOLD}$style_name "${W}
	echo
	sleep 2
	questions_theme_select
	rm -rf ~/.cache/sessions/x*
	setup_config
	banner
	echo "${R}[${C}-${R}]${G} Style changed successfully"${W}
	echo
	. $config_file
	echo "${R}[${C}-${R}]${G} Your currently installed style is ${C}${BOLD}$style_name "${W}
	fi
}

#########################################################################
#
# Change Hardware Acceleration
#
#########################################################################

function change_hw() {
	# Check if the configuration file exists
	if [[ ! -e "$config_file" ]]; then
	    echo -e "${C} It looks like you haven't installed the desktop yet\n Please install the desktop first${W}"
	    exit 0
	else
	    . "$config_file"

	    banner
	    echo "${R}[${C}-${R}]${G} Your current hardware acceleration method for Termux is: ${C}${BOLD}${termux_hw_answer}${W}"
	    echo
	    if [[ "$distro_add_answer" == "y" ]]; then
	        echo "${R}[${C}-${R}]${G} Your current hardware acceleration method for $selected_distro is: ${C}${BOLD}${pd_hw_answer}${W}"
	        echo
	        exp_distro_hw_support
	        hw_config
	        sed -i "s|selected_pd_hw_method=\"[^\"]*\"|selected_pd_hw_method=\"$pd_hw_method\"|" "$PREFIX/bin/pdrun"
	    fi
	    echo "${R}[${C}-${R}]${G} Changing drivers might break the desktop environment sometimes${W}"
	    confirmation_y_or_n "Do you want to continue" confirmation_break_de
	    if [[ "$confirmation_break_de" == "y" ]]; then
	        package_check_and_remove "mesa-zink vulkan-loader-android virglrenderer-android angle-android mesa-vulkan-icd-freedreno-dri3"
	    else
	        exit 0
	    fi
	    echo "${R}[${C}-${R}]${R}${BOLD} This process might break your desktop environment${W}"
	    echo "${R}[${C}-${R}]${G}${BOLD} Make your new choice${W}"
	    echo
	    hw_questions
	    hw_config
	    if [[ "$gui_mode" == "termux_x11" ]]; then
	        setup_tx11start_cmd
	    elif [[ "$gui_mode" == "vnc" ]]; then
	        setup_vncstart_cmd
	    elif [[ "$gui_mode" == "both" ]]; then
	        setup_tx11start_cmd
	        setup_vncstart_cmd
	    fi
	    if [[ "$distro_add_answer" == "y" ]]; then
	        sed -i "s|selected_pd_hw_method=\"[^\"]*\"|selected_pd_hw_method=\"$pd_hw_method\"|" "$PREFIX/bin/pdrun"
	    fi
	    clear
	    echo "${R}[${G}✓${R}]${G}${BOLD}Hardware acceleration method changed successfully${W}"
	fi
}

#########################################################################
#
# Change Distro
#
#########################################################################

function change_distro() {
	if [[ ! -e "$config_file" ]]; then
	echo -e "${C} It look like you haven't install the desktop yet\n Please install the desktop first"${W}
	exit 0
	else
	. $config_file
	banner
	if [[ "$distro_add_answer" == "y" ]]; then
	    if [[ -d "$PREFIX/var/lib/proot-distro/installed-rootfs/$selected_distro" ]] ;then
		echo "${R}[${C}-${R}]${G} Your currently installed distro is :${C}${BOLD}${selected_distro}${W}"
		echo
		echo "${R}[${C}-${R}]${R} Changing distro will delete all the data from your previous distro"${W}
		echo
		confirmation_y_or_n "Do you want to continue" distro_change_confirmation
		    if [[ "$distro_change_confirmation" == "y" ]]; then
			choose_distro
			echo "${R}[${C}-${R}]${G} Removing $selected_distro and it's data"${W}
			pd remove $selected_distro
			rm -rf $PREFIX/share/applications/pd_added
			rm $PREFIX/bin/$selected_distro
			pd_hw_method=$(grep 'selected_pd_hw_method=' $PREFIX/bin/pdrun | sed -e 's/.*selected_pd_hw_method="\([^"]*\)".*/\1/')
			if [[ "$pd_audio_config_answer" == "y" ]]; then
			rm $HOME/.${selected_distro}-sound-access
			fi
			echo
			distro_container_setup
			else
			echo "${R}[${C}-${R}]${C} Canceling distro change process..."${W}
			sleep 2
			exit 0
			fi
	     fi
	else
		echo "${R}[${C}-${R}]${G} It look like you haven't install any distro yet"${W}
		echo
		echo "${R}[${C}-${R}]${G}${BOLD} Do you want to add a distro container (proot distro)"${W}
		echo
		echo "${R}[${C}-${R}]${G} It will help you to install those app which are not avilable in termux"${W}
		echo
		echo "${R}[${C}-${R}]${G} You can launch those installed apps from termux like other apps"${W}
		echo
		confirmation_y_or_n "Do you want to continue" distro_add_answer
		echo "distro_add_answer=\"$distro_add_answer\"" >> $config_file
			distro_questions
			distro_hw_questions
			distro_container_setup
	fi
	fi
}

#########################################################################
#
# Change Autostart
#
#########################################################################

function change_autostart() {
    . "$config_file"

    if [[ $SHELL = *zsh ]]; then
        current_shell="zsh"
        shell_rc_file="$HOME/.zshrc"
    elif [[ $SHELL = *bash ]]; then
        current_shell="bash"
        shell_rc_file="/data/data/com.termux/files/usr/etc/bash.bashrc"
    fi

    if [[ "$zsh_answer" == "y" && "$current_shell" == "bash" ]] || [[ "$zsh_answer" == "n" && "$current_shell" == "zsh" ]]; then
        echo "${R}[${R}☓${R}]${R}It looks like you have changed your shell after the installation ${W}"
        exit 0
    fi

    if [[ "$de_on_startup" == "y" ]]; then
        if grep -q "^vncstart" "$shell_rc_file"; then
            sed -i '/# Start Vnc/,/fi/d' "$shell_rc_file"
			echo "de_on_startup=\"n\"" >> $config_file
        elif grep -q "^tx11start" "$shell_rc_file"; then
            sed -i '/# Start Termux:X11/,/fi/d' "$shell_rc_file"
			echo "de_on_startup=\"n\"" >> $config_file
        fi
	elif [[ "$de_on_startup" == "n" ]]; then
	    if [[ "$de_on_startup" == "y" && "$gui_mode" == "3" ]]; then
		echo "${R}[${C}-${R}]${G} You chose both vnc and termux:x11 to access gui mode"${W}
		echo
		echo "${R}[${C}-${R}]${G} Which will be your default"${W}
		echo
		echo "${Y}1. Termux:x11"${W}
		echo
		echo "${Y}2. Vnc"${W}
		echo
		select_an_option 2 1 autostart_gui_mode
		add_to_autostart
		fi 
    fi
}


#########################################################################
#
# Reinstall themes
#
#########################################################################

function reinstall_themes() {
	gui_check_up
	tmp_themes_folder="$PREFIX/tmp/themes"
	check_and_create_directory "$tmp_themes_folder"
	. $config_file
	echo "${R}[${C}-${R}]${G} Reinstalling Themes..."${W}
	download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/theme.tar.gz" "$tmp_themes_folder"
	local theme_names=$(ls $tmp_themes_folder)
	local themes_theme
	for theme_name in $theme_names; do
	check_and_delete "$themes_folder/$theme_name"
	mv $tmp_themes_folder/$theme_name $themes_folder/
	done
	echo "${R}[${C}-${R}]${G}${BOLD} Themes reinstall successfully"${W}
}

#########################################################################
#
# Reinstall icons
#
#########################################################################

function reinstall_icons() {
	gui_check_up
	tmp_icons_folder="$PREFIX/tmp/icons"
	check_and_create_directory "$tmp_icons_folder"
	. $config_file
	package_install_and_check "gdk-pixbuf"
	if [[ "$style_answer" == "2" ]]; then
	package_install_and_check "fluent-icon-theme"
	else
	echo "${R}[${C}-${R}]${G} Reinstalling Icons..."${W}
	download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/icon.tar.gz" "$tmp_icons_folder"
	local icon_themes_names=$(ls $tmp_icons_folder)
	local icon_theme
	for icon_theme in $icon_themes_names; do
	check_and_delete "$icons_folder/$icon_theme"
	mv $tmp_icons_folder/$icon_theme $icons_folder/
	echo "${R}[${C}-${R}]${G} Creating icon cache..."${W}
	if [[ "$de_name" == "xfce" ]]; then
	gtk-update-icon-cache -f -t $icons_folder/$icons_theme
	fi
	gtk-update-icon-cache -f -t $PREFIX/share/icons/$icons_theme
	done
	echo "${R}[${C}-${R}]${G}${BOLD} Icons reinstall successfully"${W}
	fi
}

#########################################################################
#
# Reinstall config
#
#########################################################################

function reinstall_config() {
	gui_check_up
	tmp_config_folder="$PREFIX/tmp/config"
	check_and_create_directory "$tmp_config_folder"
	. $config_file
	echo "${R}[${C}-${R}]${G} Reinstalling Config..."${W}
	download_and_extract "https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/patch/${de_name}/look_${style_answer}/config.tar.gz" "$tmp_config_folder"
	local config_file_names=$(ls $tmp_config_folder)
	local config_file
	for config_file in $config_file_names; do
	check_and_delete "$HOME/.config/$config_file"
	mv $tmp_config_folder/$config_file $HOME/.config/
	done
	echo "${R}[${C}-${R}]${G}${BOLD} Config reinstall successfully"${W}
}

#########################################################################
#
# Some Fixes | Basic Task
#
#########################################################################

function some_fixes() {
	# samsung oneui-6 audio fixes
	local device_brand_name=$(getprop ro.product.brand | cut -d ' ' -f 1)
	if [[ $device_brand_name == samsung* && $android_version -ge 14 ]]; then
    echo "LD_PRELOAD=/system/lib64/libskcodec.so" >> $shell_rc_file
	fi
	# tx11start and vncstart
	if [[ $termux_hw_answer == "4" ]]; then
	sed -i 's/^[[:space:]]*&[[:space:]]*$/ /' "$PREFIX/bin/tx11start"
	sed -i 's/^[[:space:]]*&[[:space:]]*$/ /' "$PREFIX/bin/vncstart"
	fi
	if [[ "$confirmation_exp_hwa" == "y" ]]; then
	sed -i 's|<property name="vblank_mode" type="string" value="auto"/>|<property name="vblank_mode" type="string" value="off"/>|' "$HOME/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml"
		if [[ "$device_gpu_model" == "1" ]]; then
		sed -i 's|eval "\${initialize_server}" > /dev/null 2>&1 &| |' $PREFIX/bin/pdrun
		sed -i 's/^[[:space:]]*initialize_server="\s*"/ /' "$PREFIX/bin/pdrun"
		fi
	fi
}

# add the basic details into a config file
function print_basic_details() {
	android_version=$(getprop ro.build.version.release)
	local model="$(getprop ro.product.brand) $(getprop ro.product.model)"
	local lotal_ram=$(free -htm | awk '/Mem:/ {print $2}')
	app_arch=$(uname -m)
	supported_arch="$(getprop ro.product.cpu.abilist)"
	net_condition="$(getprop gsm.network.type)"
	country="$(getprop gsm.sim.operator.iso-country)"
cat <<EOF > $config_file

####################################
########## Termux Desktop ##########
####################################

########################
#  -:Device Details:-  #
########################
#
# Termux Version: ${TERMUX_VERSION}-${TERMUX_APK_RELEASE}
# Device Model: $model
# Android Version: $android_version
# Total Ram: $lotal_ram
# Architecture: $app_arch
# System CPU Architecture: $supported_arch
# Network Condition: $net_condition (On first run)
# Country: $country
#
########################

##### Please don't modify this file otherwise some functions won't work #####

EOF
}

# check for the changes in the installer file
function check_for_update_and_update_installer() {
    if [[ -e "$PREFIX/bin/setup-termux-desktop" ]]; then
        echo "${R}[${C}-${R}]${G} Checking for update..."${W}
        echo

        check_and_create_directory "$termux_desktop_path"
        local current_script_hash=$(curl -sL https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/setup-termux-desktop | sha256sum | cut -d ' ' -f 1)
        local local_script_hash=$(basename $(sha256sum $PREFIX/bin/setup-termux-desktop | cut -d ' ' -f 1))

        if [[ "$local_script_hash" != "$current_script_hash" ]]; then
            confirmation_y_or_n "You are using an old installer. Do you want to update it to the latest version" update_installer

            if [[ "$update_installer" == "y" ]]; then
				check_and_create_directory "$PREFIX/etc/termux-desktop"
                mv $PREFIX/bin/setup-termux-desktop $PREFIX/etc/termux-desktop/
                check_and_backup "$PREFIX/etc/termux-desktop/setup-termux-desktop"
                curl -Lsf https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/setup-termux-desktop -o $PREFIX/bin/setup-termux-desktop
                chmod +x $PREFIX/bin/setup-termux-desktop
                add_common_function
                termux-reload-settings

                local new_local_script_hash=$(basename $(sha256sum $PREFIX/bin/setup-termux-desktop | cut -d ' ' -f 1))
                if [[ "$new_local_script_hash" == "$current_script_hash" ]]; then
                    echo "${R}[${C}-${R}]${G} Installer updated successfully"${W}
                    check_and_delete "$termux_desktop_path/skip_update_checkup"
                    exit 0
                else
                    echo "${R}[${C}-${R}]${G} Failed to update the installer"${W}
                    exit 0
                fi
            elif [[ "$update_installer" == "n" ]]; then
                echo "${R}[${C}-${R}]${G} Keeping the old installer"${W}
                touch $termux_desktop_path/skip_update_checkup >/dev/null 2>&1
                exit 0
            fi
        else
            echo -e "${R}[${C}-${R}]${G}${BOLD} Good job, you are using the latest installer"${W}
        fi
    fi
}

function check_and_add_installer() {
    if [[ -e "$PREFIX/bin/setup-termux-desktop" ]]; then
        if [[ ! -e "$termux_desktop_path/skip_update_checkup" ]] || [[ "$1" != "--update" ]]; then
            check_for_update_and_update_installer
        else
            echo "${R}[${C}-${R}]${G}${BOLD} You paused the update"${W}
            echo "${R}[${C}-${R}]${G}${BOLD} Use ${C}--update ${G}to re-start update"${W}
        fi
    else
        echo "${R}[${C}-${R}]${G} Adding setup-termux-desktop installer to bin"${W}
        curl -Lsf https://raw.githubusercontent.com/sabamdarif/termux-desktop/main/setup-termux-desktop -o $PREFIX/bin/setup-termux-desktop
        chmod +x $PREFIX/bin/setup-termux-desktop
    fi
}

#########################################################################
#
# Reset Changes
#
#########################################################################

function reset_changes() {
    if [[ ! -e "$config_file" ]]; then
        echo -e "${C} It looks like you haven't installed the desktop yet.\n Please install the desktop first.${W}"
        exit 0
    else
        . $config_file
        banner
        echo "${R}[${C}-${R}]${G} Removing $de_name Config..."${W}
        set_config_dir
        check_and_delete "$config_dirs"

        shell_name=$($basename "$SHELL")
        get_shellrc_path
        check_and_backup "$config_file"
        touch $config_file
        print_basic_details
        chmod +x $config_file

        if [[ "$distro_add_answer" == "y" ]]; then
            confirmation_y_or_n "Do you want to reset the distro container as well?" conf_distro_reset
            if [[ "$conf_distro_reset" == "y" ]]; then
                check_and_restore "$save_path/.${pd_shell_name}rc"
            fi
        fi

        if [[ "$terminal_utility_setup_answer" == "y" ]]; then
            check_and_delete "$PREFIX/etc/motd.sh $HOME/.termux $HOME/.fonts/font.ttf $HOME/.termux/colors.properties"
            check_and_restore "$PREFIX/etc/motd"
            check_and_restore "$PREFIX/etc/motd-playstore"
            check_and_restore "$PREFIX/etc/motd.sh"
            check_and_restore "$HOME/.termux/colors.properties"
            if grep -q "motd.sh$" "$PREFIX/etc/termux-login.sh"; then
                sed -i "s|.*motd\.sh$|# |" "$PREFIX/etc/termux-login.sh"
            fi
            rm $PREFIX/share/applications/wine-*.desktop >/dev/null 2>&1
            check_and_delete "$termux_desktop_path"
            check_and_delete "$PREFIX/bin/tx11start $PREFIX/bin/tx11stop $PREFIX/bin/vncstop $PREFIX/bin/vncstart $PREFIX/bin/gui"
        fi

        check_and_delete "$HOME/Music"
        check_and_delete "$HOME/Downloads"
        check_and_delete "$HOME/Desktop"
        check_and_delete "$HOME/Pictures"
        check_and_delete "$HOME/Videos"

        if [[ "$shell_name" == "zsh" ]]; then
            chsh -s bash
            rm -rf $HOME/.oh-my-zsh
        fi

        check_and_delete "$shell_rc_file"
        check_and_restore "$shell_rc_file"

        echo -e "${R}[${C}-${R}]${G}${BOLD} Reset successful.\n Now restart Termux.${W}"
    fi
}

#########################################################################
#
# Call Functions
#
#########################################################################
check_termux
check_and_add_installer
current_path=$(pwd)
function install_termux_desktop() {
cleanup_cache
update_sys
sleep 2
termux-wake-lock
sleep 2
check_and_create_directory "$PREFIX/etc/termux-desktop"
touch $config_file
chmod +x $config_file
print_basic_details
install_required_packages
questions
if [[ "$distro_add_answer" == "y" ]]; then
distro_questions
fi
banner
if [[ "$confirmation_exp_hwa" == "y" ]]; then
exp_hwa_support
else
hw_questions
fi
setup_folder
setup_zsh
setup_fonts
install_desktop
browser_installer
ide_installer
media_player_installer
photo_editor_installer
setup_synaptic
setup_wine
if [[ "$style_answer" == "0" ]]; then
    banner
	echo "${R}[${C}-${R}]${G}${BOLD} Configuring Stock $de_name Style..."${W}
	echo
	echo "style_name=\"Stock\"" >> $config_file
else
setup_config
fi
banner
distro_container_setup
gui_launcher
terminal_utility_setup
add_to_autostart
some_fixes
cleanup_cache
termux-wake-unlock
notes
delete_installer_file
}

function show_help() {
echo -e "
--debug           to create a log file
-i,--install      to start installation
-r,--remove       to remove termux desktop
-c,--change       to change some previous configuration
-ri,--reinstall   to reinstall some previously install stuff
--reset           to reset all changes made by this script without uninstalling any package
-h,--help         to show help
"
}

function show_change_help() {
echo "options you can use with --change"
echo -e "
style      to change installed style
pd,distro  to change installed distro container
hw,hwa     to change hardware acceleration method
autostart  to change autostart behaviour
h,help     to show help

example uses : --change style
"
}

function show_reinstall_help() {
echo -e "
options you can use with --reinstall

icons      to reinstall icons pack
themes     to reinstall themes pack
config     to reinstall config
h,help     to show help

example uses : --reinstall icons
example uses : --reinstall icons,themes...etc to reinstall them at once
"
}

if [[ $1 == "--debug" ]]; then
    debug
    shift
fi

case $1 in
    --remove|-r)
        remove_termux_desktop
        ;;
    --install|-i)
        install_termux_desktop
        ;;
    --change|-c)
        case $2 in
            style)
                change_style
                ;;
			distro|pd)
                change_distro
                ;;
			hw|hwa)
                change_hw
                ;;
			autostart)
                change_autostart
                ;;
			h|help|-h|--help)
			    show_change_help
                ;;
            *)
                echo "${R}[${R}☓${R}]${R}${BOLD} Invalid option: ${C}$2"${W}
				echo "${R}[${C}-${R}]${G} Use --change help to show help"${W}
                ;;
        esac
        ;;
		--reinstall|-ri)
        IFS=',' read -ra OPTIONS <<< "$2"
        for option in "${OPTIONS[@]}"; do
            case $option in
                icons)
                    reinstall_icons
                    ;;
                themes)
                    reinstall_themes
                    ;;
                config)
                    reinstall_config
                    ;;
                h|help|-h|--help)
				    show_reinstall_help
                    exit
                    ;;
                *)
                    echo "${R}[${R}☓${R}]${R}${BOLD} Invalid option: ${C}$option"${W}
					echo "${R}[${C}-${R}]${G} Use --reinstall help to show help"${W}
                    ;;
            esac
        done
        ;;
	--update)
	check_for_update_and_update_installer
	;;
    --help|-h)
        show_help
        ;;
	--reset)
	    reset_changes
		;;
    *)
        install_termux_desktop
        ;;
esac